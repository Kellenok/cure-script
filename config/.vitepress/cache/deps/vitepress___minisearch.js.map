{
  "version": 3,
  "sources": ["../../../../node_modules/minisearch/node_modules/tslib/tslib.es6.js", "../../../../node_modules/minisearch/src/SearchableMap/TreeIterator.ts", "../../../../node_modules/minisearch/src/SearchableMap/fuzzySearch.ts", "../../../../node_modules/minisearch/src/SearchableMap/SearchableMap.ts", "../../../../node_modules/minisearch/src/MiniSearch.ts"],
  "sourcesContent": ["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n", "import type { RadixTree, Entry, LeafType } from './types'\r\n\r\n/** @ignore */\r\nconst ENTRIES = 'ENTRIES'\r\n\r\n/** @ignore */\r\nconst KEYS = 'KEYS'\r\n\r\n/** @ignore */\r\nconst VALUES = 'VALUES'\r\n\r\n/** @ignore */\r\nconst LEAF = '' as LeafType\r\n\r\ninterface Iterators<T> {\r\n  ENTRIES: Entry<T>\r\n  KEYS: string\r\n  VALUES: T\r\n}\r\n\r\ntype Kind<T> = keyof Iterators<T>\r\ntype Result<T, K extends keyof Iterators<T>> = Iterators<T>[K]\r\n\r\ntype IteratorPath<T> = {\r\n  node: RadixTree<T>,\r\n  keys: string[]\r\n}[]\r\n\r\nexport type IterableSet<T> = {\r\n  _tree: RadixTree<T>,\r\n  _prefix: string\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nclass TreeIterator<T, K extends Kind<T>> implements Iterator<Result<T, K>> {\r\n  set: IterableSet<T>\r\n  _type: K\r\n  _path: IteratorPath<T>\r\n\r\n  constructor (set: IterableSet<T>, type: K) {\r\n    const node = set._tree\r\n    const keys = Array.from(node.keys())\r\n    this.set = set\r\n    this._type = type\r\n    this._path = keys.length > 0 ? [{ node, keys }] : []\r\n  }\r\n\r\n  next (): IteratorResult<Result<T, K>> {\r\n    const value = this.dive()\r\n    this.backtrack()\r\n    return value\r\n  }\r\n\r\n  dive (): IteratorResult<Result<T, K>> {\r\n    if (this._path.length === 0) { return { done: true, value: undefined } }\r\n    const { node, keys } = last(this._path)!\r\n    if (last(keys) === LEAF) { return { done: false, value: this.result() } }\r\n\r\n    const child = node.get(last(keys)!)!\r\n    this._path.push({ node: child, keys: Array.from(child.keys()) })\r\n    return this.dive()\r\n  }\r\n\r\n  backtrack (): void {\r\n    if (this._path.length === 0) { return }\r\n    const keys = last(this._path)!.keys\r\n    keys.pop()\r\n    if (keys.length > 0) { return }\r\n    this._path.pop()\r\n    this.backtrack()\r\n  }\r\n\r\n  key (): string {\r\n    return this.set._prefix + this._path\r\n      .map(({ keys }) => last(keys))\r\n      .filter(key => key !== LEAF)\r\n      .join('')\r\n  }\r\n\r\n  value (): T {\r\n    return last(this._path)!.node.get(LEAF)!\r\n  }\r\n\r\n  result (): Result<T, K> {\r\n    switch (this._type) {\r\n      case VALUES: return this.value() as Result<T, K>\r\n      case KEYS: return this.key() as Result<T, K>\r\n      default: return [this.key(), this.value()] as Result<T, K>\r\n    }\r\n  }\r\n\r\n  [Symbol.iterator] () {\r\n    return this\r\n  }\r\n}\r\n\r\nconst last = <T>(array: T[]): T | undefined => {\r\n  return array[array.length - 1]\r\n}\r\n\r\nexport { TreeIterator, ENTRIES, KEYS, VALUES, LEAF }\r\n", "/* eslint-disable no-labels */\r\nimport { LEAF } from './TreeIterator'\r\nimport type { RadixTree } from './types'\r\n\r\nexport type FuzzyResult<T> = [T, number]\r\n\r\nexport type FuzzyResults<T> = Map<string, FuzzyResult<T>>\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const fuzzySearch = <T = any>(node: RadixTree<T>, query: string, maxDistance: number): FuzzyResults<T> => {\r\n  const results: FuzzyResults<T> = new Map()\r\n  if (query === undefined) return results\r\n\r\n  // Number of columns in the Levenshtein matrix.\r\n  const n = query.length + 1\r\n\r\n  // Matching terms can never be longer than N + maxDistance.\r\n  const m = n + maxDistance\r\n\r\n  // Fill first matrix row and column with numbers: 0 1 2 3 ...\r\n  const matrix = new Uint8Array(m * n).fill(maxDistance + 1)\r\n  for (let j = 0; j < n; ++j) matrix[j] = j\r\n  for (let i = 1; i < m; ++i) matrix[i * n] = i\r\n\r\n  recurse(\r\n    node,\r\n    query,\r\n    maxDistance,\r\n    results,\r\n    matrix,\r\n    1,\r\n    n,\r\n    ''\r\n  )\r\n\r\n  return results\r\n}\r\n\r\n// Modified version of http://stevehanov.ca/blog/?id=114\r\n\r\n// This builds a Levenshtein matrix for a given query and continuously updates\r\n// it for nodes in the radix tree that fall within the given maximum edit\r\n// distance. Keeping the same matrix around is beneficial especially for larger\r\n// edit distances.\r\n//\r\n//           k   a   t   e   <-- query\r\n//       0   1   2   3   4\r\n//   c   1   1   2   3   4\r\n//   a   2   2   1   2   3\r\n//   t   3   3   2   1  [2]  <-- edit distance\r\n//   ^\r\n//   ^ term in radix tree, rows are added and removed as needed\r\n\r\nconst recurse = <T = any>(\r\n  node: RadixTree<T>,\r\n  query: string,\r\n  maxDistance: number,\r\n  results: FuzzyResults<T>,\r\n  matrix: Uint8Array,\r\n  m: number,\r\n  n: number,\r\n  prefix: string\r\n): void => {\r\n  const offset = m * n\r\n\r\n  key: for (const key of node.keys()) {\r\n    if (key === LEAF) {\r\n      // We've reached a leaf node. Check if the edit distance acceptable and\r\n      // store the result if it is.\r\n      const distance = matrix[offset - 1]\r\n      if (distance <= maxDistance) {\r\n        results.set(prefix, [node.get(key)!, distance])\r\n      }\r\n    } else {\r\n      // Iterate over all characters in the key. Update the Levenshtein matrix\r\n      // and check if the minimum distance in the last row is still within the\r\n      // maximum edit distance. If it is, we can recurse over all child nodes.\r\n      let i = m\r\n      for (let pos = 0; pos < key.length; ++pos, ++i) {\r\n        const char = key[pos]\r\n        const thisRowOffset = n * i\r\n        const prevRowOffset = thisRowOffset - n\r\n\r\n        // Set the first column based on the previous row, and initialize the\r\n        // minimum distance in the current row.\r\n        let minDistance = matrix[thisRowOffset]\r\n\r\n        const jmin = Math.max(0, i - maxDistance - 1)\r\n        const jmax = Math.min(n - 1, i + maxDistance)\r\n\r\n        // Iterate over remaining columns (characters in the query).\r\n        for (let j = jmin; j < jmax; ++j) {\r\n          const different = char !== query[j]\r\n\r\n          // It might make sense to only read the matrix positions used for\r\n          // deletion/insertion if the characters are different. But we want to\r\n          // avoid conditional reads for performance reasons.\r\n          const rpl = matrix[prevRowOffset + j] + +different\r\n          const del = matrix[prevRowOffset + j + 1] + 1\r\n          const ins = matrix[thisRowOffset + j] + 1\r\n\r\n          const dist = matrix[thisRowOffset + j + 1] = Math.min(rpl, del, ins)\r\n\r\n          if (dist < minDistance) minDistance = dist\r\n        }\r\n\r\n        // Because distance will never decrease, we can stop. There will be no\r\n        // matching child nodes.\r\n        if (minDistance > maxDistance) {\r\n          continue key\r\n        }\r\n      }\r\n\r\n      recurse(\r\n        node.get(key)!,\r\n        query,\r\n        maxDistance,\r\n        results,\r\n        matrix,\r\n        i,\r\n        n,\r\n        prefix + key\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default fuzzySearch\r\n", "/* eslint-disable no-labels */\r\nimport { TreeIterator, ENTRIES, KEYS, VALUES, LEAF } from './TreeIterator'\r\nimport fuzzySearch, { type FuzzyResults } from './fuzzySearch'\r\nimport type { RadixTree, Entry, Path } from './types'\r\n\r\n/**\r\n * A class implementing the same interface as a standard JavaScript\r\n * [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\r\n * with string keys, but adding support for efficiently searching entries with\r\n * prefix or fuzzy search. This class is used internally by {@link MiniSearch}\r\n * as the inverted index data structure. The implementation is a radix tree\r\n * (compressed prefix tree).\r\n *\r\n * Since this class can be of general utility beyond _MiniSearch_, it is\r\n * exported by the `minisearch` package and can be imported (or required) as\r\n * `minisearch/SearchableMap`.\r\n *\r\n * @typeParam T  The type of the values stored in the map.\r\n */\r\nexport default class SearchableMap<T = any> {\r\n  /**\r\n   * @internal\r\n   */\r\n  _tree: RadixTree<T>\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  _prefix: string\r\n\r\n  private _size: number | undefined = undefined\r\n\r\n  /**\r\n   * The constructor is normally called without arguments, creating an empty\r\n   * map. In order to create a {@link SearchableMap} from an iterable or from an\r\n   * object, check {@link SearchableMap.from} and {@link\r\n   * SearchableMap.fromObject}.\r\n   *\r\n   * The constructor arguments are for internal use, when creating derived\r\n   * mutable views of a map at a prefix.\r\n   */\r\n  constructor (tree: RadixTree<T> = new Map(), prefix = '') {\r\n    this._tree = tree\r\n    this._prefix = prefix\r\n  }\r\n\r\n  /**\r\n   * Creates and returns a mutable view of this {@link SearchableMap},\r\n   * containing only entries that share the given prefix.\r\n   *\r\n   * ### Usage:\r\n   *\r\n   * ```javascript\r\n   * let map = new SearchableMap()\r\n   * map.set(\"unicorn\", 1)\r\n   * map.set(\"universe\", 2)\r\n   * map.set(\"university\", 3)\r\n   * map.set(\"unique\", 4)\r\n   * map.set(\"hello\", 5)\r\n   *\r\n   * let uni = map.atPrefix(\"uni\")\r\n   * uni.get(\"unique\") // => 4\r\n   * uni.get(\"unicorn\") // => 1\r\n   * uni.get(\"hello\") // => undefined\r\n   *\r\n   * let univer = map.atPrefix(\"univer\")\r\n   * univer.get(\"unique\") // => undefined\r\n   * univer.get(\"universe\") // => 2\r\n   * univer.get(\"university\") // => 3\r\n   * ```\r\n   *\r\n   * @param prefix  The prefix\r\n   * @return A {@link SearchableMap} representing a mutable view of the original\r\n   * Map at the given prefix\r\n   */\r\n  atPrefix (prefix: string): SearchableMap<T> {\r\n    if (!prefix.startsWith(this._prefix)) { throw new Error('Mismatched prefix') }\r\n\r\n    const [node, path] = trackDown(this._tree, prefix.slice(this._prefix.length))\r\n\r\n    if (node === undefined) {\r\n      const [parentNode, key] = last(path)\r\n\r\n      for (const k of parentNode!.keys()) {\r\n        if (k !== LEAF && k.startsWith(key)) {\r\n          const node = new Map()\r\n          node.set(k.slice(key.length), parentNode!.get(k)!)\r\n          return new SearchableMap(node, prefix)\r\n        }\r\n      }\r\n    }\r\n\r\n    return new SearchableMap<T>(node, prefix)\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\r\n   */\r\n  clear (): void {\r\n    this._size = undefined\r\n    this._tree.clear()\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\r\n   * @param key  Key to delete\r\n   */\r\n  delete (key: string): void {\r\n    this._size = undefined\r\n    return remove(this._tree, key)\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\r\n   * @return An iterator iterating through `[key, value]` entries.\r\n   */\r\n  entries () {\r\n    return new TreeIterator(this, ENTRIES)\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\r\n   * @param fn  Iteration function\r\n   */\r\n  forEach (fn: (key: string, value: T, map: SearchableMap) => void): void {\r\n    for (const [key, value] of this) {\r\n      fn(key, value, this)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a Map of all the entries that have a key within the given edit\r\n   * distance from the search key. The keys of the returned Map are the matching\r\n   * keys, while the values are two-element arrays where the first element is\r\n   * the value associated to the key, and the second is the edit distance of the\r\n   * key to the search key.\r\n   *\r\n   * ### Usage:\r\n   *\r\n   * ```javascript\r\n   * let map = new SearchableMap()\r\n   * map.set('hello', 'world')\r\n   * map.set('hell', 'yeah')\r\n   * map.set('ciao', 'mondo')\r\n   *\r\n   * // Get all entries that match the key 'hallo' with a maximum edit distance of 2\r\n   * map.fuzzyGet('hallo', 2)\r\n   * // => Map(2) { 'hello' => ['world', 1], 'hell' => ['yeah', 2] }\r\n   *\r\n   * // In the example, the \"hello\" key has value \"world\" and edit distance of 1\r\n   * // (change \"e\" to \"a\"), the key \"hell\" has value \"yeah\" and edit distance of 2\r\n   * // (change \"e\" to \"a\", delete \"o\")\r\n   * ```\r\n   *\r\n   * @param key  The search key\r\n   * @param maxEditDistance  The maximum edit distance (Levenshtein)\r\n   * @return A Map of the matching keys to their value and edit distance\r\n   */\r\n  fuzzyGet (key: string, maxEditDistance: number): FuzzyResults<T> {\r\n    return fuzzySearch<T>(this._tree, key, maxEditDistance)\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\r\n   * @param key  Key to get\r\n   * @return Value associated to the key, or `undefined` if the key is not\r\n   * found.\r\n   */\r\n  get (key: string): T | undefined {\r\n    const node = lookup<T>(this._tree, key)\r\n    return node !== undefined ? node.get(LEAF) : undefined\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\r\n   * @param key  Key\r\n   * @return True if the key is in the map, false otherwise\r\n   */\r\n  has (key: string): boolean {\r\n    const node = lookup(this._tree, key)\r\n    return node !== undefined && node.has(LEAF)\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\r\n   * @return An `Iterable` iterating through keys\r\n   */\r\n  keys () {\r\n    return new TreeIterator(this, KEYS)\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\r\n   * @param key  Key to set\r\n   * @param value  Value to associate to the key\r\n   * @return The {@link SearchableMap} itself, to allow chaining\r\n   */\r\n  set (key: string, value: T): SearchableMap<T> {\r\n    if (typeof key !== 'string') { throw new Error('key must be a string') }\r\n    this._size = undefined\r\n    const node = createPath(this._tree, key)\r\n    node.set(LEAF, value)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\r\n   */\r\n  get size (): number {\r\n    if (this._size) { return this._size }\r\n    /** @ignore */\r\n    this._size = 0\r\n\r\n    const iter = this.entries()\r\n    while (!iter.next().done) this._size! += 1\r\n\r\n    return this._size\r\n  }\r\n\r\n  /**\r\n   * Updates the value at the given key using the provided function. The function\r\n   * is called with the current value at the key, and its return value is used as\r\n   * the new value to be set.\r\n   *\r\n   * ### Example:\r\n   *\r\n   * ```javascript\r\n   * // Increment the current value by one\r\n   * searchableMap.update('somekey', (currentValue) => currentValue == null ? 0 : currentValue + 1)\r\n   * ```\r\n   *\r\n   * If the value at the given key is or will be an object, it might not require\r\n   * re-assignment. In that case it is better to use `fetch()`, because it is\r\n   * faster.\r\n   *\r\n   * @param key  The key to update\r\n   * @param fn  The function used to compute the new value from the current one\r\n   * @return The {@link SearchableMap} itself, to allow chaining\r\n   */\r\n  update (key: string, fn: (value: T | undefined) => T): SearchableMap<T> {\r\n    if (typeof key !== 'string') { throw new Error('key must be a string') }\r\n    this._size = undefined\r\n    const node = createPath(this._tree, key)\r\n    node.set(LEAF, fn(node.get(LEAF)))\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Fetches the value of the given key. If the value does not exist, calls the\r\n   * given function to create a new value, which is inserted at the given key\r\n   * and subsequently returned.\r\n   *\r\n   * ### Example:\r\n   *\r\n   * ```javascript\r\n   * const map = searchableMap.fetch('somekey', () => new Map())\r\n   * map.set('foo', 'bar')\r\n   * ```\r\n   *\r\n   * @param key  The key to update\r\n   * @param defaultValue  A function that creates a new value if the key does not exist\r\n   * @return The existing or new value at the given key\r\n   */\r\n  fetch (key: string, initial: () => T): T {\r\n    if (typeof key !== 'string') { throw new Error('key must be a string') }\r\n    this._size = undefined\r\n    const node = createPath(this._tree, key)\r\n\r\n    let value = node.get(LEAF)\r\n    if (value === undefined) {\r\n      node.set(LEAF, value = initial())\r\n    }\r\n\r\n    return value\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\r\n   * @return An `Iterable` iterating through values.\r\n   */\r\n  values () {\r\n    return new TreeIterator(this, VALUES)\r\n  }\r\n\r\n  /**\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\r\n   */\r\n  [Symbol.iterator] () {\r\n    return this.entries()\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link SearchableMap} from an `Iterable` of entries\r\n   *\r\n   * @param entries  Entries to be inserted in the {@link SearchableMap}\r\n   * @return A new {@link SearchableMap} with the given entries\r\n   */\r\n  static from<T = any> (entries: Iterable<Entry<T>> | Entry<T>[]) {\r\n    const tree = new SearchableMap()\r\n    for (const [key, value] of entries) {\r\n      tree.set(key, value)\r\n    }\r\n    return tree\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link SearchableMap} from the iterable properties of a JavaScript object\r\n   *\r\n   * @param object  Object of entries for the {@link SearchableMap}\r\n   * @return A new {@link SearchableMap} with the given entries\r\n   */\r\n  static fromObject<T = any> (object: { [key: string]: T }) {\r\n    return SearchableMap.from<T>(Object.entries(object))\r\n  }\r\n}\r\n\r\nconst trackDown = <T = any>(tree: RadixTree<T> | undefined, key: string, path: Path<T> = []): [RadixTree<T> | undefined, Path<T>] => {\r\n  if (key.length === 0 || tree == null) { return [tree, path] }\r\n\r\n  for (const k of tree.keys()) {\r\n    if (k !== LEAF && key.startsWith(k)) {\r\n      path.push([tree, k]) // performance: update in place\r\n      return trackDown(tree.get(k)!, key.slice(k.length), path)\r\n    }\r\n  }\r\n\r\n  path.push([tree, key]) // performance: update in place\r\n  return trackDown(undefined, '', path)\r\n}\r\n\r\nconst lookup = <T = any>(tree: RadixTree<T>, key: string): RadixTree<T> | undefined => {\r\n  if (key.length === 0 || tree == null) { return tree }\r\n\r\n  for (const k of tree.keys()) {\r\n    if (k !== LEAF && key.startsWith(k)) {\r\n      return lookup(tree.get(k)!, key.slice(k.length))\r\n    }\r\n  }\r\n}\r\n\r\n// Create a path in the radix tree for the given key, and returns the deepest\r\n// node. This function is in the hot path for indexing. It avoids unnecessary\r\n// string operations and recursion for performance.\r\nconst createPath = <T = any>(node: RadixTree<T>, key: string): RadixTree<T> => {\r\n  const keyLength = key.length\r\n\r\n  outer: for (let pos = 0; node && pos < keyLength;) {\r\n    for (const k of node.keys()) {\r\n      // Check whether this key is a candidate: the first characters must match.\r\n      if (k !== LEAF && key[pos] === k[0]) {\r\n        const len = Math.min(keyLength - pos, k.length)\r\n\r\n        // Advance offset to the point where key and k no longer match.\r\n        let offset = 1\r\n        while (offset < len && key[pos + offset] === k[offset]) ++offset\r\n\r\n        const child = node.get(k)!\r\n        if (offset === k.length) {\r\n          // The existing key is shorter than the key we need to create.\r\n          node = child\r\n        } else {\r\n          // Partial match: we need to insert an intermediate node to contain\r\n          // both the existing subtree and the new node.\r\n          const intermediate = new Map()\r\n          intermediate.set(k.slice(offset), child)\r\n          node.set(key.slice(pos, pos + offset), intermediate)\r\n          node.delete(k)\r\n          node = intermediate\r\n        }\r\n\r\n        pos += offset\r\n        continue outer\r\n      }\r\n    }\r\n\r\n    // Create a final child node to contain the final suffix of the key.\r\n    const child = new Map()\r\n    node.set(key.slice(pos), child)\r\n    return child\r\n  }\r\n\r\n  return node\r\n}\r\n\r\nconst remove = <T = any>(tree: RadixTree<T>, key: string): void => {\r\n  const [node, path] = trackDown(tree, key)\r\n  if (node === undefined) { return }\r\n  node.delete(LEAF)\r\n\r\n  if (node.size === 0) {\r\n    cleanup(path)\r\n  } else if (node.size === 1) {\r\n    const [key, value] = node.entries().next().value\r\n    merge(path, key, value)\r\n  }\r\n}\r\n\r\nconst cleanup = <T = any>(path: Path<T>): void => {\r\n  if (path.length === 0) { return }\r\n\r\n  const [node, key] = last(path)\r\n  node!.delete(key)\r\n\r\n  if (node!.size === 0) {\r\n    cleanup(path.slice(0, -1))\r\n  } else if (node!.size === 1) {\r\n    const [key, value] = node!.entries().next().value\r\n    if (key !== LEAF) {\r\n      merge(path.slice(0, -1), key, value)\r\n    }\r\n  }\r\n}\r\n\r\nconst merge = <T = any>(path: Path<T>, key: string, value: RadixTree<T>): void => {\r\n  if (path.length === 0) { return }\r\n\r\n  const [node, nodeKey] = last(path)\r\n  node!.set(nodeKey + key, value)\r\n  node!.delete(nodeKey)\r\n}\r\n\r\nconst last = <T = any>(array: T[]): T => {\r\n  return array[array.length - 1]\r\n}\r\n", "import SearchableMap from './SearchableMap/SearchableMap'\r\n\r\nexport type LowercaseCombinationOperator = 'or' | 'and' | 'and_not'\r\nexport type CombinationOperator = LowercaseCombinationOperator | Uppercase<LowercaseCombinationOperator> | Capitalize<LowercaseCombinationOperator>\r\n\r\nconst OR: LowercaseCombinationOperator = 'or'\r\nconst AND: LowercaseCombinationOperator = 'and'\r\nconst AND_NOT: LowercaseCombinationOperator = 'and_not'\r\n\r\n/**\r\n * Search options to customize the search behavior.\r\n */\r\nexport type SearchOptions = {\r\n  /**\r\n   * Names of the fields to search in. If omitted, all fields are searched.\r\n   */\r\n  fields?: string[],\r\n\r\n  /**\r\n   * Function used to filter search results, for example on the basis of stored\r\n   * fields. It takes as argument each search result and should return a boolean\r\n   * to indicate if the result should be kept or not.\r\n   */\r\n  filter?: (result: SearchResult) => boolean,\r\n\r\n  /**\r\n   * Key-value object of field names to boosting values. By default, fields are\r\n   * assigned a boosting factor of 1. If one assigns to a field a boosting value\r\n   * of 2, a result that matches the query in that field is assigned a score\r\n   * twice as high as a result matching the query in another field, all else\r\n   * being equal.\r\n   */\r\n  boost?: { [fieldName: string]: number },\r\n\r\n  /**\r\n   * Function to calculate a boost factor for each term.\r\n   *\r\n   * This function, if provided, is called for each query term (as split by\r\n   * `tokenize` and processed by `processTerm`). The arguments passed to the\r\n   * function are the query term, the positional index of the term in the query,\r\n   * and the array of all query terms. It is expected to return a numeric boost\r\n   * factor for the term. A factor lower than 1 reduces the importance of the\r\n   * term, a factor greater than 1 increases it. A factor of exactly 1 is\r\n   * neutral, and does not affect the term's importance.\r\n   */\r\n  boostTerm?: (term: string, i: number, terms: string[]) => number,\r\n\r\n  /**\r\n   * Relative weights to assign to prefix search results and fuzzy search\r\n   * results. Exact matches are assigned a weight of 1.\r\n   */\r\n  weights?: { fuzzy: number, prefix: number },\r\n\r\n  /**\r\n   * Function to calculate a boost factor for documents. It takes as arguments\r\n   * the document ID, and a term that matches the search in that document, and\r\n   * the value of the stored fields for the document (if any).  It should return\r\n   * a boosting factor: a number higher than 1 increases the computed score, a\r\n   * number lower than 1 decreases the score, and a falsy value skips the search\r\n   * result completely.\r\n   */\r\n  boostDocument?: (documentId: any, term: string, storedFields?: Record<string, unknown>) => number,\r\n\r\n  /**\r\n   * Controls whether to perform prefix search. It can be a simple boolean, or a\r\n   * function.\r\n   *\r\n   * If a boolean is passed, prefix search is performed if true.\r\n   *\r\n   * If a function is passed, it is called upon search with a search term, the\r\n   * positional index of that search term in the tokenized search query, and the\r\n   * tokenized search query. The function should return a boolean to indicate\r\n   * whether to perform prefix search for that search term.\r\n   */\r\n  prefix?: boolean | ((term: string, index: number, terms: string[]) => boolean),\r\n\r\n  /**\r\n   * Controls whether to perform fuzzy search. It can be a simple boolean, or a\r\n   * number, or a function.\r\n   *\r\n   * If a boolean is given, fuzzy search with a default fuzziness parameter is\r\n   * performed if true.\r\n   *\r\n   * If a number higher or equal to 1 is given, fuzzy search is performed, with\r\n   * a maximum edit distance (Levenshtein) equal to the number.\r\n   *\r\n   * If a number between 0 and 1 is given, fuzzy search is performed within a\r\n   * maximum edit distance corresponding to that fraction of the term length,\r\n   * approximated to the nearest integer. For example, 0.2 would mean an edit\r\n   * distance of 20% of the term length, so 1 character in a 5-characters term.\r\n   * The calculated fuzziness value is limited by the `maxFuzzy` option, to\r\n   * prevent slowdown for very long queries.\r\n   *\r\n   * If a function is passed, the function is called upon search with a search\r\n   * term, a positional index of that term in the tokenized search query, and\r\n   * the tokenized search query. It should return a boolean or a number, with\r\n   * the meaning documented above.\r\n   */\r\n  fuzzy?: boolean | number | ((term: string, index: number, terms: string[]) => boolean | number),\r\n\r\n  /**\r\n   * Controls the maximum fuzziness when using a fractional fuzzy value. This is\r\n   * set to 6 by default. Very high edit distances usually don't produce\r\n   * meaningful results, but can excessively impact search performance.\r\n   */\r\n  maxFuzzy?: number,\r\n\r\n  /**\r\n   * The operand to combine partial results for each term. By default it is\r\n   * \"OR\", so results matching _any_ of the search terms are returned by a\r\n   * search. If \"AND\" is given, only results matching _all_ the search terms are\r\n   * returned by a search.\r\n   */\r\n  combineWith?: CombinationOperator,\r\n\r\n  /**\r\n   * Function to tokenize the search query. By default, the same tokenizer used\r\n   * for indexing is used also for search.\r\n   *\r\n   * @remarks This function is called after `extractField` extracts a truthy\r\n   * value from a field. This function is then expected to split the extracted\r\n   * `text` document into tokens (more commonly referred to as \"terms\" in this\r\n   * context). The resulting split might be simple, like for example on word\r\n   * boundaries, or it might be more complex, taking into account certain\r\n   * encoding, or parsing needs, or even just special cases. Think about how one\r\n   * might need to go about indexing the term \"short-term\". You would likely\r\n   * want to treat this case specially, and return two terms instead, `[\r\n   * \"short\", \"term\" ]`.\r\n   *\r\n   * Or, you could let such a case be handled by the `processTerm` function,\r\n   * which is designed to turn each token/term into whole terms or sub-terms. In\r\n   * any case, the purpose of this function is to split apart the provided\r\n   * `text` document into parts that can be processed by the `processTerm`\r\n   * function.\r\n   */\r\n  tokenize?: (text: string) => string[],\r\n\r\n  /**\r\n   * Function to process or normalize terms in the search query. By default, the\r\n   * same term processor used for indexing is used also for search.\r\n   *\r\n   * @remarks\r\n   * During the document indexing phase, the first step is to call the\r\n   * `extractField` function to fetch the requested value/field from the\r\n   * document. This is then passed off to the `tokenize` function, which will\r\n   * break apart each value into \"terms\". These terms are then individually\r\n   * passed through this function to compute each term individually. A term\r\n   * might for example be something like \"lbs\", in which case one would likely\r\n   * want to return `[ \"lbs\", \"lb\", \"pound\", \"pounds\" ]`. You may also return\r\n   * just a single string, or a falsy value if you would like to skip indexing\r\n   * entirely for a specific term.\r\n   *\r\n   * Truthy return value(s) are then fed to the indexer as positive matches for\r\n   * this document. In our example above, all four of the `[ \"lbs\", \"lb\",\r\n   * \"pound\", \"pounds\" ]` terms would be added to the indexing engine, matching\r\n   * against the current document being computed.\r\n   *\r\n   * *Note: Whatever values are returned from this function will receive no\r\n   * further processing before being indexed. This means for example, if you\r\n   * include whitespace at the beginning or end of a word, it will also be\r\n   * indexed that way, with the included whitespace.*\r\n   */\r\n  processTerm?: (term: string) => string | string[] | null | undefined | false\r\n\r\n  /**\r\n   * BM25+ algorithm parameters. Customizing these is almost never necessary,\r\n   * and finetuning them requires an understanding of the BM25 scoring model. In\r\n   * most cases, it is best to omit this option to use defaults, and instead use\r\n   * boosting to tweak scoring for specific use cases.\r\n   */\r\n  bm25?: BM25Params\r\n}\r\n\r\ntype SearchOptionsWithDefaults = SearchOptions & {\r\n  boost: { [fieldName: string]: number },\r\n\r\n  weights: { fuzzy: number, prefix: number },\r\n\r\n  prefix: boolean | ((term: string, index: number, terms: string[]) => boolean),\r\n\r\n  fuzzy: boolean | number | ((term: string, index: number, terms: string[]) => boolean | number),\r\n\r\n  maxFuzzy: number,\r\n\r\n  combineWith: CombinationOperator\r\n\r\n  bm25: BM25Params\r\n}\r\n\r\n/**\r\n * Configuration options passed to the {@link MiniSearch} constructor\r\n *\r\n * @typeParam T  The type of documents being indexed.\r\n */\r\nexport type Options<T = any> = {\r\n   /**\r\n    * Names of the document fields to be indexed.\r\n    */\r\n  fields: string[],\r\n\r\n   /**\r\n    * Name of the ID field, uniquely identifying a document.\r\n    */\r\n  idField?: string,\r\n\r\n   /**\r\n    * Names of fields to store, so that search results would include them. By\r\n    * default none, so results would only contain the id field.\r\n    */\r\n  storeFields?: string[],\r\n\r\n   /**\r\n    * Function used to extract the value of each field in documents. By default,\r\n    * the documents are assumed to be plain objects with field names as keys,\r\n    * but by specifying a custom `extractField` function one can completely\r\n    * customize how the fields are extracted.\r\n    *\r\n    * The function takes as arguments the document, and the name of the field to\r\n    * extract from it. It should return the field value as a string.\r\n    *\r\n    * @remarks\r\n    * The returned string is fed into the `tokenize` function to split it up\r\n    * into tokens.\r\n    */\r\n  extractField?: (document: T, fieldName: string) => string,\r\n\r\n   /**\r\n    * Function used to split a field value into individual terms to be indexed.\r\n    * The default tokenizer separates terms by space or punctuation, but a\r\n    * custom tokenizer can be provided for custom logic.\r\n    *\r\n    * The function takes as arguments string to tokenize, and the name of the\r\n    * field it comes from. It should return the terms as an array of strings.\r\n    * When used for tokenizing a search query instead of a document field, the\r\n    * `fieldName` is undefined.\r\n    *\r\n    * @remarks\r\n    * This function is called after `extractField` extracts a truthy value from a\r\n    * field. This function is then expected to split the extracted `text` document\r\n    * into tokens (more commonly referred to as \"terms\" in this context). The resulting\r\n    * split might be simple, like for example on word boundaries, or it might be more\r\n    * complex, taking into account certain encoding, or parsing needs, or even just\r\n    * special cases. Think about how one might need to go about indexing the term\r\n    * \"short-term\". You would likely want to treat this case specially, and return two\r\n    * terms instead, `[ \"short\", \"term\" ]`.\r\n    *\r\n    * Or, you could let such a case be handled by the `processTerm` function,\r\n    * which is designed to turn each token/term into whole terms or sub-terms. In any\r\n    * case, the purpose of this function is to split apart the provided `text` document\r\n    * into parts that can be processed by the `processTerm` function.\r\n    */\r\n  tokenize?: (text: string, fieldName?: string) => string[],\r\n\r\n   /**\r\n    * Function used to process a term before indexing or search. This can be\r\n    * used for normalization (such as stemming). By default, terms are\r\n    * downcased, and otherwise no other normalization is performed.\r\n    *\r\n    * The function takes as arguments a term to process, and the name of the\r\n    * field it comes from. It should return the processed term as a string, or a\r\n    * falsy value to reject the term entirely.\r\n    *\r\n    * It can also return an array of strings, in which case each string in the\r\n    * returned array is indexed as a separate term.\r\n    *\r\n    * @remarks\r\n    * During the document indexing phase, the first step is to call the `extractField`\r\n    * function to fetch the requested value/field from the document. This is then\r\n    * passed off to the `tokenizer`, which will break apart each value into \"terms\".\r\n    * These terms are then individually passed through the `processTerm` function\r\n    * to compute each term individually. A term might for example be something\r\n    * like \"lbs\", in which case one would likely want to return\r\n    * `[ \"lbs\", \"lb\", \"pound\", \"pounds\" ]`. You may also return a single string value,\r\n    * or a falsy value if you would like to skip indexing entirely for a specific term.\r\n    *\r\n    * Truthy return value(s) are then fed to the indexer as positive matches for this\r\n    * document. In our example above, all four of the `[ \"lbs\", \"lb\", \"pound\", \"pounds\" ]`\r\n    * terms would be added to the indexing engine, matching against the current document\r\n    * being computed.\r\n    *\r\n    * *Note: Whatever values are returned from this function will receive no further\r\n    * processing before being indexed. This means for example, if you include whitespace\r\n    * at the beginning or end of a word, it will also be indexed that way, with the\r\n    * included whitespace.*\r\n    */\r\n  processTerm?: (term: string, fieldName?: string) => string | string[] | null | undefined | false,\r\n\r\n  /**\r\n   * Function called to log messages. Arguments are a log level ('debug',\r\n   * 'info', 'warn', or 'error'), a log message, and an optional string code\r\n   * that identifies the reason for the log.\r\n   *\r\n   * The default implementation uses `console`, if defined.\r\n   */\r\n  logger?: (level: LogLevel, message: string, code?: string) => void\r\n\r\n  /**\r\n   * If `true` (the default), vacuuming is performed automatically as soon as\r\n   * {@link MiniSearch#discard} is called a certain number of times, cleaning up\r\n   * obsolete references from the index. If `false`, no automatic vacuuming is\r\n   * performed. Custom settings controlling auto vacuuming thresholds, as well\r\n   * as batching behavior, can be passed as an object (see the {@link\r\n   * AutoVacuumOptions} type).\r\n   */\r\n  autoVacuum?: boolean | AutoVacuumOptions\r\n\r\n   /**\r\n    * Default search options (see the {@link SearchOptions} type and the {@link\r\n    * MiniSearch#search} method for details)\r\n    */\r\n  searchOptions?: SearchOptions,\r\n\r\n   /**\r\n    * Default auto suggest options (see the {@link SearchOptions} type and the\r\n    * {@link MiniSearch#autoSuggest} method for details)\r\n    */\r\n  autoSuggestOptions?: SearchOptions\r\n}\r\n\r\ntype OptionsWithDefaults<T = any> = Options<T> & {\r\n  storeFields: string[]\r\n\r\n  idField: string\r\n\r\n  extractField: (document: T, fieldName: string) => string\r\n\r\n  tokenize: (text: string, fieldName: string) => string[]\r\n\r\n  processTerm: (term: string, fieldName: string) => string | string[] | null | undefined | false\r\n\r\n  logger: (level: LogLevel, message: string, code?: string) => void\r\n\r\n  autoVacuum: false | AutoVacuumOptions\r\n\r\n  searchOptions: SearchOptionsWithDefaults\r\n\r\n  autoSuggestOptions: SearchOptions\r\n}\r\n\r\ntype LogLevel = 'debug' | 'info' | 'warn' | 'error'\r\n\r\n/**\r\n * The type of auto-suggestions\r\n */\r\nexport type Suggestion = {\r\n  /**\r\n   * The suggestion\r\n   */\r\n  suggestion: string,\r\n\r\n  /**\r\n   * Suggestion as an array of terms\r\n   */\r\n  terms: string[],\r\n\r\n  /**\r\n   * Score for the suggestion\r\n   */\r\n  score: number\r\n}\r\n\r\n/**\r\n * Match information for a search result. It is a key-value object where keys\r\n * are terms that matched, and values are the list of fields that the term was\r\n * found in.\r\n */\r\nexport type MatchInfo = {\r\n  [term: string]: string[]\r\n}\r\n\r\n/**\r\n * Type of the search results. Each search result indicates the document ID, the\r\n * terms that matched, the match information, the score, and all the stored\r\n * fields.\r\n */\r\nexport type SearchResult = {\r\n  /**\r\n   * The document ID\r\n   */\r\n  id: any,\r\n\r\n  /**\r\n   * List of document terms that matched. For example, if a prefix search for\r\n   * `\"moto\"` matches `\"motorcycle\"`, `terms` will contain `\"motorcycle\"`.\r\n   */\r\n  terms: string[],\r\n\r\n  /**\r\n   * List of query terms that matched. For example, if a prefix search for\r\n   * `\"moto\"` matches `\"motorcycle\"`, `queryTerms` will contain `\"moto\"`.\r\n   */\r\n  queryTerms: string[],\r\n\r\n  /**\r\n   * Score of the search results\r\n   */\r\n  score: number,\r\n\r\n  /**\r\n   * Match information, see {@link MatchInfo}\r\n   */\r\n  match: MatchInfo,\r\n\r\n  /**\r\n   * Stored fields\r\n   */\r\n  [key: string]: any\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport type AsPlainObject = {\r\n  documentCount: number,\r\n  nextId: number,\r\n  documentIds: { [shortId: string]: any }\r\n  fieldIds: { [fieldName: string]: number }\r\n  fieldLength: { [shortId: string]: number[] }\r\n  averageFieldLength: number[],\r\n  storedFields: { [shortId: string]: any }\r\n  dirtCount?: number,\r\n  index: [string, { [fieldId: string]: SerializedIndexEntry }][]\r\n  serializationVersion: number\r\n}\r\n\r\nexport type QueryCombination = SearchOptions & { queries: Query[] }\r\n\r\n/**\r\n * Wildcard query, used to match all terms\r\n */\r\nexport type Wildcard = typeof MiniSearch.wildcard\r\n\r\n/**\r\n * Search query expression, either a query string or an expression tree\r\n * combining several queries with a combination of AND or OR.\r\n */\r\nexport type Query = QueryCombination | string | Wildcard\r\n\r\n/**\r\n * Options to control vacuuming behavior.\r\n *\r\n * Vacuuming cleans up document references made obsolete by {@link\r\n * MiniSearch.discard} from the index. On large indexes, vacuuming is\r\n * potentially costly, because it has to traverse the whole inverted index.\r\n * Therefore, in order to dilute this cost so it does not negatively affects the\r\n * application, vacuuming is performed in batches, with a delay between each\r\n * batch. These options are used to configure the batch size and the delay\r\n * between batches.\r\n */\r\nexport type VacuumOptions = {\r\n  /**\r\n   * Size of each vacuuming batch (the number of terms in the index that will be\r\n   * traversed in each batch). Defaults to 1000.\r\n   */\r\n  batchSize?: number,\r\n\r\n  /**\r\n   * Wait time between each vacuuming batch in milliseconds. Defaults to 10.\r\n   */\r\n  batchWait?: number\r\n}\r\n\r\n/**\r\n * Sets minimum thresholds for `dirtCount` and `dirtFactor` that trigger an\r\n * automatic vacuuming.\r\n */\r\nexport type VacuumConditions = {\r\n  /**\r\n   * Minimum `dirtCount` (number of discarded documents since the last vacuuming)\r\n   * under which auto vacuum is not triggered. It defaults to 20.\r\n   */\r\n  minDirtCount?: number\r\n\r\n  /**\r\n   * Minimum `dirtFactor` (proportion of discarded documents over the total)\r\n   * under which auto vacuum is not triggered. It defaults to 0.1.\r\n   */\r\n  minDirtFactor?: number,\r\n}\r\n\r\n/**\r\n * Options to control auto vacuum behavior. When discarding a document with\r\n * {@link MiniSearch#discard}, a vacuuming operation is automatically started if\r\n * the `dirtCount` and `dirtFactor` are above the `minDirtCount` and\r\n * `minDirtFactor` thresholds defined by this configuration. See {@link\r\n * VacuumConditions} for details on these.\r\n *\r\n * Also, `batchSize` and `batchWait` can be specified, controlling batching\r\n * behavior (see {@link VacuumOptions}).\r\n */\r\nexport type AutoVacuumOptions = VacuumOptions & VacuumConditions\r\n\r\ntype QuerySpec = {\r\n  prefix: boolean,\r\n  fuzzy: number | boolean,\r\n  term: string,\r\n  termBoost: number\r\n}\r\n\r\ntype DocumentTermFreqs = Map<number, number>\r\ntype FieldTermData = Map<number, DocumentTermFreqs>\r\n\r\ninterface RawResultValue {\r\n  // Intermediate score, before applying the final score based on number of\r\n  // matched terms.\r\n  score: number,\r\n\r\n  // Set of all query terms that were matched. They may not be present in the\r\n  // text exactly in the case of prefix/fuzzy matches. We must check for\r\n  // uniqueness before adding a new term. This is much faster than using a set,\r\n  // because the number of elements is relatively small.\r\n  terms: string[],\r\n\r\n  // All terms that were found in the content, including the fields in which\r\n  // they were present. This object will be provided as part of the final search\r\n  // results.\r\n  match: MatchInfo,\r\n}\r\n\r\ntype RawResult = Map<number, RawResultValue>\r\n\r\n/**\r\n * {@link MiniSearch} is the main entrypoint class, implementing a full-text\r\n * search engine in memory.\r\n *\r\n * @typeParam T  The type of the documents being indexed.\r\n *\r\n * ### Basic example:\r\n *\r\n * ```javascript\r\n * const documents = [\r\n *   {\r\n *     id: 1,\r\n *     title: 'Moby Dick',\r\n *     text: 'Call me Ishmael. Some years ago...',\r\n *     category: 'fiction'\r\n *   },\r\n *   {\r\n *     id: 2,\r\n *     title: 'Zen and the Art of Motorcycle Maintenance',\r\n *     text: 'I can see by my watch...',\r\n *     category: 'fiction'\r\n *   },\r\n *   {\r\n *     id: 3,\r\n *     title: 'Neuromancer',\r\n *     text: 'The sky above the port was...',\r\n *     category: 'fiction'\r\n *   },\r\n *   {\r\n *     id: 4,\r\n *     title: 'Zen and the Art of Archery',\r\n *     text: 'At first sight it must seem...',\r\n *     category: 'non-fiction'\r\n *   },\r\n *   // ...and more\r\n * ]\r\n *\r\n * // Create a search engine that indexes the 'title' and 'text' fields for\r\n * // full-text search. Search results will include 'title' and 'category' (plus the\r\n * // id field, that is always stored and returned)\r\n * const miniSearch = new MiniSearch({\r\n *   fields: ['title', 'text'],\r\n *   storeFields: ['title', 'category']\r\n * })\r\n *\r\n * // Add documents to the index\r\n * miniSearch.addAll(documents)\r\n *\r\n * // Search for documents:\r\n * let results = miniSearch.search('zen art motorcycle')\r\n * // => [\r\n * //   { id: 2, title: 'Zen and the Art of Motorcycle Maintenance', category: 'fiction', score: 2.77258 },\r\n * //   { id: 4, title: 'Zen and the Art of Archery', category: 'non-fiction', score: 1.38629 }\r\n * // ]\r\n * ```\r\n */\r\nexport default class MiniSearch<T = any> {\r\n  protected _options: OptionsWithDefaults<T>\r\n  protected _index: SearchableMap<FieldTermData>\r\n  protected _documentCount: number\r\n  protected _documentIds: Map<number, any>\r\n  protected _idToShortId: Map<any, number>\r\n  protected _fieldIds: { [key: string]: number }\r\n  protected _fieldLength: Map<number, number[]>\r\n  protected _avgFieldLength: number[]\r\n  protected _nextId: number\r\n  protected _storedFields: Map<number, Record<string, unknown>>\r\n  protected _dirtCount: number\r\n  private _currentVacuum: Promise<void> | null\r\n  private _enqueuedVacuum: Promise<void> | null\r\n  private _enqueuedVacuumConditions: VacuumConditions | undefined\r\n\r\n  /**\r\n   * The special wildcard symbol that can be passed to {@link MiniSearch#search}\r\n   * to match all documents\r\n   */\r\n  static readonly wildcard: unique symbol = Symbol('*')\r\n\r\n  /**\r\n   * @param options  Configuration options\r\n   *\r\n   * ### Examples:\r\n   *\r\n   * ```javascript\r\n   * // Create a search engine that indexes the 'title' and 'text' fields of your\r\n   * // documents:\r\n   * const miniSearch = new MiniSearch({ fields: ['title', 'text'] })\r\n   * ```\r\n   *\r\n   * ### ID Field:\r\n   *\r\n   * ```javascript\r\n   * // Your documents are assumed to include a unique 'id' field, but if you want\r\n   * // to use a different field for document identification, you can set the\r\n   * // 'idField' option:\r\n   * const miniSearch = new MiniSearch({ idField: 'key', fields: ['title', 'text'] })\r\n   * ```\r\n   *\r\n   * ### Options and defaults:\r\n   *\r\n   * ```javascript\r\n   * // The full set of options (here with their default value) is:\r\n   * const miniSearch = new MiniSearch({\r\n   *   // idField: field that uniquely identifies a document\r\n   *   idField: 'id',\r\n   *\r\n   *   // extractField: function used to get the value of a field in a document.\r\n   *   // By default, it assumes the document is a flat object with field names as\r\n   *   // property keys and field values as string property values, but custom logic\r\n   *   // can be implemented by setting this option to a custom extractor function.\r\n   *   extractField: (document, fieldName) => document[fieldName],\r\n   *\r\n   *   // tokenize: function used to split fields into individual terms. By\r\n   *   // default, it is also used to tokenize search queries, unless a specific\r\n   *   // `tokenize` search option is supplied. When tokenizing an indexed field,\r\n   *   // the field name is passed as the second argument.\r\n   *   tokenize: (string, _fieldName) => string.split(SPACE_OR_PUNCTUATION),\r\n   *\r\n   *   // processTerm: function used to process each tokenized term before\r\n   *   // indexing. It can be used for stemming and normalization. Return a falsy\r\n   *   // value in order to discard a term. By default, it is also used to process\r\n   *   // search queries, unless a specific `processTerm` option is supplied as a\r\n   *   // search option. When processing a term from a indexed field, the field\r\n   *   // name is passed as the second argument.\r\n   *   processTerm: (term, _fieldName) => term.toLowerCase(),\r\n   *\r\n   *   // searchOptions: default search options, see the `search` method for\r\n   *   // details\r\n   *   searchOptions: undefined,\r\n   *\r\n   *   // fields: document fields to be indexed. Mandatory, but not set by default\r\n   *   fields: undefined\r\n   *\r\n   *   // storeFields: document fields to be stored and returned as part of the\r\n   *   // search results.\r\n   *   storeFields: []\r\n   * })\r\n   * ```\r\n   */\r\n  constructor (options: Options<T>) {\r\n    if (options?.fields == null) {\r\n      throw new Error('MiniSearch: option \"fields\" must be provided')\r\n    }\r\n\r\n    const autoVacuum = (options.autoVacuum == null || options.autoVacuum === true) ? defaultAutoVacuumOptions : options.autoVacuum\r\n\r\n    this._options = {\r\n      ...defaultOptions,\r\n      ...options,\r\n      autoVacuum,\r\n      searchOptions: { ...defaultSearchOptions, ...(options.searchOptions || {}) },\r\n      autoSuggestOptions: { ...defaultAutoSuggestOptions, ...(options.autoSuggestOptions || {}) }\r\n    }\r\n\r\n    this._index = new SearchableMap()\r\n\r\n    this._documentCount = 0\r\n\r\n    this._documentIds = new Map()\r\n\r\n    this._idToShortId = new Map()\r\n\r\n    // Fields are defined during initialization, don't change, are few in\r\n    // number, rarely need iterating over, and have string keys. Therefore in\r\n    // this case an object is a better candidate than a Map to store the mapping\r\n    // from field key to ID.\r\n    this._fieldIds = {}\r\n\r\n    this._fieldLength = new Map()\r\n\r\n    this._avgFieldLength = []\r\n\r\n    this._nextId = 0\r\n\r\n    this._storedFields = new Map()\r\n\r\n    this._dirtCount = 0\r\n\r\n    this._currentVacuum = null\r\n\r\n    this._enqueuedVacuum = null\r\n    this._enqueuedVacuumConditions = defaultVacuumConditions\r\n\r\n    this.addFields(this._options.fields)\r\n  }\r\n\r\n  /**\r\n   * Adds a document to the index\r\n   *\r\n   * @param document  The document to be indexed\r\n   */\r\n  add (document: T): void {\r\n    const { extractField, tokenize, processTerm, fields, idField } = this._options\r\n    const id = extractField(document, idField)\r\n    if (id == null) {\r\n      throw new Error(`MiniSearch: document does not have ID field \"${idField}\"`)\r\n    }\r\n\r\n    if (this._idToShortId.has(id)) {\r\n      throw new Error(`MiniSearch: duplicate ID ${id}`)\r\n    }\r\n\r\n    const shortDocumentId = this.addDocumentId(id)\r\n    this.saveStoredFields(shortDocumentId, document)\r\n\r\n    for (const field of fields) {\r\n      const fieldValue = extractField(document, field)\r\n      if (fieldValue == null) continue\r\n\r\n      const tokens = tokenize(fieldValue.toString(), field)\r\n      const fieldId = this._fieldIds[field]\r\n\r\n      const uniqueTerms = new Set(tokens).size\r\n      this.addFieldLength(shortDocumentId, fieldId, this._documentCount - 1, uniqueTerms)\r\n\r\n      for (const term of tokens) {\r\n        const processedTerm = processTerm(term, field)\r\n        if (Array.isArray(processedTerm)) {\r\n          for (const t of processedTerm) {\r\n            this.addTerm(fieldId, shortDocumentId, t)\r\n          }\r\n        } else if (processedTerm) {\r\n          this.addTerm(fieldId, shortDocumentId, processedTerm)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds all the given documents to the index\r\n   *\r\n   * @param documents  An array of documents to be indexed\r\n   */\r\n  addAll (documents: readonly T[]): void {\r\n    for (const document of documents) this.add(document)\r\n  }\r\n\r\n  /**\r\n   * Adds all the given documents to the index asynchronously.\r\n   *\r\n   * Returns a promise that resolves (to `undefined`) when the indexing is done.\r\n   * This method is useful when index many documents, to avoid blocking the main\r\n   * thread. The indexing is performed asynchronously and in chunks.\r\n   *\r\n   * @param documents  An array of documents to be indexed\r\n   * @param options  Configuration options\r\n   * @return A promise resolving to `undefined` when the indexing is done\r\n   */\r\n  addAllAsync (documents: readonly T[], options: { chunkSize?: number } = {}): Promise<void> {\r\n    const { chunkSize = 10 } = options\r\n    const acc: { chunk: T[], promise: Promise<void> } = { chunk: [], promise: Promise.resolve() }\r\n\r\n    const { chunk, promise } = documents.reduce(({ chunk, promise }, document: T, i: number) => {\r\n      chunk.push(document)\r\n      if ((i + 1) % chunkSize === 0) {\r\n        return {\r\n          chunk: [],\r\n          promise: promise\r\n            .then(() => new Promise(resolve => setTimeout(resolve, 0)))\r\n            .then(() => this.addAll(chunk))\r\n        }\r\n      } else {\r\n        return { chunk, promise }\r\n      }\r\n    }, acc)\r\n\r\n    return promise.then(() => this.addAll(chunk))\r\n  }\r\n\r\n  /**\r\n   * Removes the given document from the index.\r\n   *\r\n   * The document to remove must NOT have changed between indexing and removal,\r\n   * otherwise the index will be corrupted.\r\n   *\r\n   * This method requires passing the full document to be removed (not just the\r\n   * ID), and immediately removes the document from the inverted index, allowing\r\n   * memory to be released. A convenient alternative is {@link\r\n   * MiniSearch#discard}, which needs only the document ID, and has the same\r\n   * visible effect, but delays cleaning up the index until the next vacuuming.\r\n   *\r\n   * @param document  The document to be removed\r\n   */\r\n  remove (document: T): void {\r\n    const { tokenize, processTerm, extractField, fields, idField } = this._options\r\n    const id = extractField(document, idField)\r\n\r\n    if (id == null) {\r\n      throw new Error(`MiniSearch: document does not have ID field \"${idField}\"`)\r\n    }\r\n\r\n    const shortId = this._idToShortId.get(id)\r\n\r\n    if (shortId == null) {\r\n      throw new Error(`MiniSearch: cannot remove document with ID ${id}: it is not in the index`)\r\n    }\r\n\r\n    for (const field of fields) {\r\n      const fieldValue = extractField(document, field)\r\n      if (fieldValue == null) continue\r\n\r\n      const tokens = tokenize(fieldValue.toString(), field)\r\n      const fieldId = this._fieldIds[field]\r\n\r\n      const uniqueTerms = new Set(tokens).size\r\n      this.removeFieldLength(shortId, fieldId, this._documentCount, uniqueTerms)\r\n\r\n      for (const term of tokens) {\r\n        const processedTerm = processTerm(term, field)\r\n        if (Array.isArray(processedTerm)) {\r\n          for (const t of processedTerm) {\r\n            this.removeTerm(fieldId, shortId, t)\r\n          }\r\n        } else if (processedTerm) {\r\n          this.removeTerm(fieldId, shortId, processedTerm)\r\n        }\r\n      }\r\n    }\r\n\r\n    this._storedFields.delete(shortId)\r\n    this._documentIds.delete(shortId)\r\n    this._idToShortId.delete(id)\r\n    this._fieldLength.delete(shortId)\r\n    this._documentCount -= 1\r\n  }\r\n\r\n  /**\r\n   * Removes all the given documents from the index. If called with no arguments,\r\n   * it removes _all_ documents from the index.\r\n   *\r\n   * @param documents  The documents to be removed. If this argument is omitted,\r\n   * all documents are removed. Note that, for removing all documents, it is\r\n   * more efficient to call this method with no arguments than to pass all\r\n   * documents.\r\n   */\r\n  removeAll (documents?: readonly T[]): void {\r\n    if (documents) {\r\n      for (const document of documents) this.remove(document)\r\n    } else if (arguments.length > 0) {\r\n      throw new Error('Expected documents to be present. Omit the argument to remove all documents.')\r\n    } else {\r\n      this._index = new SearchableMap()\r\n      this._documentCount = 0\r\n      this._documentIds = new Map()\r\n      this._idToShortId = new Map()\r\n      this._fieldLength = new Map()\r\n      this._avgFieldLength = []\r\n      this._storedFields = new Map()\r\n      this._nextId = 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Discards the document with the given ID, so it won't appear in search results\r\n   *\r\n   * It has the same visible effect of {@link MiniSearch.remove} (both cause the\r\n   * document to stop appearing in searches), but a different effect on the\r\n   * internal data structures:\r\n   *\r\n   *   - {@link MiniSearch#remove} requires passing the full document to be\r\n   *   removed as argument, and removes it from the inverted index immediately.\r\n   *\r\n   *   - {@link MiniSearch#discard} instead only needs the document ID, and\r\n   *   works by marking the current version of the document as discarded, so it\r\n   *   is immediately ignored by searches. This is faster and more convenient\r\n   *   than {@link MiniSearch#remove}, but the index is not immediately\r\n   *   modified. To take care of that, vacuuming is performed after a certain\r\n   *   number of documents are discarded, cleaning up the index and allowing\r\n   *   memory to be released.\r\n   *\r\n   * After discarding a document, it is possible to re-add a new version, and\r\n   * only the new version will appear in searches. In other words, discarding\r\n   * and re-adding a document works exactly like removing and re-adding it. The\r\n   * {@link MiniSearch.replace} method can also be used to replace a document\r\n   * with a new version.\r\n   *\r\n   * #### Details about vacuuming\r\n   *\r\n   * Repetite calls to this method would leave obsolete document references in\r\n   * the index, invisible to searches. Two mechanisms take care of cleaning up:\r\n   * clean up during search, and vacuuming.\r\n   *\r\n   *   - Upon search, whenever a discarded ID is found (and ignored for the\r\n   *   results), references to the discarded document are removed from the\r\n   *   inverted index entries for the search terms. This ensures that subsequent\r\n   *   searches for the same terms do not need to skip these obsolete references\r\n   *   again.\r\n   *\r\n   *   - In addition, vacuuming is performed automatically by default (see the\r\n   *   `autoVacuum` field in {@link Options}) after a certain number of\r\n   *   documents are discarded. Vacuuming traverses all terms in the index,\r\n   *   cleaning up all references to discarded documents. Vacuuming can also be\r\n   *   triggered manually by calling {@link MiniSearch#vacuum}.\r\n   *\r\n   * @param id  The ID of the document to be discarded\r\n   */\r\n  discard (id: any): void {\r\n    const shortId = this._idToShortId.get(id)\r\n\r\n    if (shortId == null) {\r\n      throw new Error(`MiniSearch: cannot discard document with ID ${id}: it is not in the index`)\r\n    }\r\n\r\n    this._idToShortId.delete(id)\r\n    this._documentIds.delete(shortId)\r\n    this._storedFields.delete(shortId)\r\n\r\n    ;(this._fieldLength.get(shortId) || []).forEach((fieldLength, fieldId) => {\r\n      this.removeFieldLength(shortId, fieldId, this._documentCount, fieldLength)\r\n    })\r\n\r\n    this._fieldLength.delete(shortId)\r\n\r\n    this._documentCount -= 1\r\n    this._dirtCount += 1\r\n\r\n    this.maybeAutoVacuum()\r\n  }\r\n\r\n  private maybeAutoVacuum (): void {\r\n    if (this._options.autoVacuum === false) { return }\r\n\r\n    const { minDirtFactor, minDirtCount, batchSize, batchWait } = this._options.autoVacuum\r\n    this.conditionalVacuum({ batchSize, batchWait }, { minDirtCount, minDirtFactor })\r\n  }\r\n\r\n  /**\r\n   * Discards the documents with the given IDs, so they won't appear in search\r\n   * results\r\n   *\r\n   * It is equivalent to calling {@link MiniSearch#discard} for all the given\r\n   * IDs, but with the optimization of triggering at most one automatic\r\n   * vacuuming at the end.\r\n   *\r\n   * Note: to remove all documents from the index, it is faster and more\r\n   * convenient to call {@link MiniSearch.removeAll} with no argument, instead\r\n   * of passing all IDs to this method.\r\n   */\r\n  discardAll (ids: readonly any[]): void {\r\n    const autoVacuum = this._options.autoVacuum\r\n\r\n    try {\r\n      this._options.autoVacuum = false\r\n\r\n      for (const id of ids) {\r\n        this.discard(id)\r\n      }\r\n    } finally {\r\n      this._options.autoVacuum = autoVacuum\r\n    }\r\n\r\n    this.maybeAutoVacuum()\r\n  }\r\n\r\n  /**\r\n   * It replaces an existing document with the given updated version\r\n   *\r\n   * It works by discarding the current version and adding the updated one, so\r\n   * it is functionally equivalent to calling {@link MiniSearch#discard}\r\n   * followed by {@link MiniSearch#add}. The ID of the updated document should\r\n   * be the same as the original one.\r\n   *\r\n   * Since it uses {@link MiniSearch#discard} internally, this method relies on\r\n   * vacuuming to clean up obsolete document references from the index, allowing\r\n   * memory to be released (see {@link MiniSearch#discard}).\r\n   *\r\n   * @param updatedDocument  The updated document to replace the old version\r\n   * with\r\n   */\r\n  replace (updatedDocument: T): void {\r\n    const { idField, extractField } = this._options\r\n    const id = extractField(updatedDocument, idField)\r\n\r\n    this.discard(id)\r\n    this.add(updatedDocument)\r\n  }\r\n\r\n  /**\r\n   * Triggers a manual vacuuming, cleaning up references to discarded documents\r\n   * from the inverted index\r\n   *\r\n   * Vacuuming is only useful for applications that use the {@link\r\n   * MiniSearch#discard} or {@link MiniSearch#replace} methods.\r\n   *\r\n   * By default, vacuuming is performed automatically when needed (controlled by\r\n   * the `autoVacuum` field in {@link Options}), so there is usually no need to\r\n   * call this method, unless one wants to make sure to perform vacuuming at a\r\n   * specific moment.\r\n   *\r\n   * Vacuuming traverses all terms in the inverted index in batches, and cleans\r\n   * up references to discarded documents from the posting list, allowing memory\r\n   * to be released.\r\n   *\r\n   * The method takes an optional object as argument with the following keys:\r\n   *\r\n   *   - `batchSize`: the size of each batch (1000 by default)\r\n   *\r\n   *   - `batchWait`: the number of milliseconds to wait between batches (10 by\r\n   *   default)\r\n   *\r\n   * On large indexes, vacuuming could have a non-negligible cost: batching\r\n   * avoids blocking the thread for long, diluting this cost so that it is not\r\n   * negatively affecting the application. Nonetheless, this method should only\r\n   * be called when necessary, and relying on automatic vacuuming is usually\r\n   * better.\r\n   *\r\n   * It returns a promise that resolves (to undefined) when the clean up is\r\n   * completed. If vacuuming is already ongoing at the time this method is\r\n   * called, a new one is enqueued immediately after the ongoing one, and a\r\n   * corresponding promise is returned. However, no more than one vacuuming is\r\n   * enqueued on top of the ongoing one, even if this method is called more\r\n   * times (enqueuing multiple ones would be useless).\r\n   *\r\n   * @param options  Configuration options for the batch size and delay. See\r\n   * {@link VacuumOptions}.\r\n   */\r\n  vacuum (options: VacuumOptions = {}): Promise<void> {\r\n    return this.conditionalVacuum(options)\r\n  }\r\n\r\n  private conditionalVacuum (options: VacuumOptions, conditions?: VacuumConditions): Promise<void> {\r\n    // If a vacuum is already ongoing, schedule another as soon as it finishes,\r\n    // unless there's already one enqueued. If one was already enqueued, do not\r\n    // enqueue another on top, but make sure that the conditions are the\r\n    // broadest.\r\n    if (this._currentVacuum) {\r\n      this._enqueuedVacuumConditions = this._enqueuedVacuumConditions && conditions\r\n      if (this._enqueuedVacuum != null) { return this._enqueuedVacuum }\r\n\r\n      this._enqueuedVacuum = this._currentVacuum.then(() => {\r\n        const conditions = this._enqueuedVacuumConditions\r\n        this._enqueuedVacuumConditions = defaultVacuumConditions\r\n        return this.performVacuuming(options, conditions)\r\n      })\r\n      return this._enqueuedVacuum\r\n    }\r\n\r\n    if (this.vacuumConditionsMet(conditions) === false) { return Promise.resolve() }\r\n\r\n    this._currentVacuum = this.performVacuuming(options)\r\n    return this._currentVacuum\r\n  }\r\n\r\n  private async performVacuuming (options: VacuumOptions, conditions?: VacuumConditions): Promise<void> {\r\n    const initialDirtCount = this._dirtCount\r\n\r\n    if (this.vacuumConditionsMet(conditions)) {\r\n      const batchSize = options.batchSize || defaultVacuumOptions.batchSize\r\n      const batchWait = options.batchWait || defaultVacuumOptions.batchWait\r\n      let i = 1\r\n\r\n      for (const [term, fieldsData] of this._index) {\r\n        for (const [fieldId, fieldIndex] of fieldsData) {\r\n          for (const [shortId] of fieldIndex) {\r\n            if (this._documentIds.has(shortId)) { continue }\r\n\r\n            if (fieldIndex.size <= 1) {\r\n              fieldsData.delete(fieldId)\r\n            } else {\r\n              fieldIndex.delete(shortId)\r\n            }\r\n          }\r\n        }\r\n\r\n        if (this._index.get(term)!.size === 0) {\r\n          this._index.delete(term)\r\n        }\r\n\r\n        if (i % batchSize === 0) {\r\n          await new Promise((resolve) => setTimeout(resolve, batchWait))\r\n        }\r\n\r\n        i += 1\r\n      }\r\n\r\n      this._dirtCount -= initialDirtCount\r\n    }\r\n\r\n    // Make the next lines always async, so they execute after this function returns\r\n    await null\r\n\r\n    this._currentVacuum = this._enqueuedVacuum\r\n    this._enqueuedVacuum = null\r\n  }\r\n\r\n  private vacuumConditionsMet (conditions?: VacuumConditions) {\r\n    if (conditions == null) { return true }\r\n\r\n    let { minDirtCount, minDirtFactor } = conditions\r\n    minDirtCount = minDirtCount || defaultAutoVacuumOptions.minDirtCount\r\n    minDirtFactor = minDirtFactor || defaultAutoVacuumOptions.minDirtFactor\r\n\r\n    return this.dirtCount >= minDirtCount && this.dirtFactor >= minDirtFactor\r\n  }\r\n\r\n  /**\r\n   * Is `true` if a vacuuming operation is ongoing, `false` otherwise\r\n   */\r\n  get isVacuuming (): boolean {\r\n    return this._currentVacuum != null\r\n  }\r\n\r\n  /**\r\n   * The number of documents discarded since the most recent vacuuming\r\n   */\r\n  get dirtCount (): number {\r\n    return this._dirtCount\r\n  }\r\n\r\n  /**\r\n   * A number between 0 and 1 giving an indication about the proportion of\r\n   * documents that are discarded, and can therefore be cleaned up by vacuuming.\r\n   * A value close to 0 means that the index is relatively clean, while a higher\r\n   * value means that the index is relatively dirty, and vacuuming could release\r\n   * memory.\r\n   */\r\n  get dirtFactor (): number {\r\n    return this._dirtCount / (1 + this._documentCount + this._dirtCount)\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if a document with the given ID is present in the index and\r\n   * available for search, `false` otherwise\r\n   *\r\n   * @param id  The document ID\r\n   */\r\n  has (id: any): boolean {\r\n    return this._idToShortId.has(id)\r\n  }\r\n\r\n  /**\r\n   * Returns the stored fields (as configured in the `storeFields` constructor\r\n   * option) for the given document ID. Returns `undefined` if the document is\r\n   * not present in the index.\r\n   *\r\n   * @param id  The document ID\r\n   */\r\n  getStoredFields (id: any): Record<string, unknown> | undefined {\r\n    const shortId = this._idToShortId.get(id)\r\n\r\n    if (shortId == null) { return undefined }\r\n\r\n    return this._storedFields.get(shortId)\r\n  }\r\n\r\n  /**\r\n   * Search for documents matching the given search query.\r\n   *\r\n   * The result is a list of scored document IDs matching the query, sorted by\r\n   * descending score, and each including data about which terms were matched and\r\n   * in which fields.\r\n   *\r\n   * ### Basic usage:\r\n   *\r\n   * ```javascript\r\n   * // Search for \"zen art motorcycle\" with default options: terms have to match\r\n   * // exactly, and individual terms are joined with OR\r\n   * miniSearch.search('zen art motorcycle')\r\n   * // => [ { id: 2, score: 2.77258, match: { ... } }, { id: 4, score: 1.38629, match: { ... } } ]\r\n   * ```\r\n   *\r\n   * ### Restrict search to specific fields:\r\n   *\r\n   * ```javascript\r\n   * // Search only in the 'title' field\r\n   * miniSearch.search('zen', { fields: ['title'] })\r\n   * ```\r\n   *\r\n   * ### Field boosting:\r\n   *\r\n   * ```javascript\r\n   * // Boost a field\r\n   * miniSearch.search('zen', { boost: { title: 2 } })\r\n   * ```\r\n   *\r\n   * ### Prefix search:\r\n   *\r\n   * ```javascript\r\n   * // Search for \"moto\" with prefix search (it will match documents\r\n   * // containing terms that start with \"moto\" or \"neuro\")\r\n   * miniSearch.search('moto neuro', { prefix: true })\r\n   * ```\r\n   *\r\n   * ### Fuzzy search:\r\n   *\r\n   * ```javascript\r\n   * // Search for \"ismael\" with fuzzy search (it will match documents containing\r\n   * // terms similar to \"ismael\", with a maximum edit distance of 0.2 term.length\r\n   * // (rounded to nearest integer)\r\n   * miniSearch.search('ismael', { fuzzy: 0.2 })\r\n   * ```\r\n   *\r\n   * ### Combining strategies:\r\n   *\r\n   * ```javascript\r\n   * // Mix of exact match, prefix search, and fuzzy search\r\n   * miniSearch.search('ismael mob', {\r\n   *  prefix: true,\r\n   *  fuzzy: 0.2\r\n   * })\r\n   * ```\r\n   *\r\n   * ### Advanced prefix and fuzzy search:\r\n   *\r\n   * ```javascript\r\n   * // Perform fuzzy and prefix search depending on the search term. Here\r\n   * // performing prefix and fuzzy search only on terms longer than 3 characters\r\n   * miniSearch.search('ismael mob', {\r\n   *  prefix: term => term.length > 3\r\n   *  fuzzy: term => term.length > 3 ? 0.2 : null\r\n   * })\r\n   * ```\r\n   *\r\n   * ### Combine with AND:\r\n   *\r\n   * ```javascript\r\n   * // Combine search terms with AND (to match only documents that contain both\r\n   * // \"motorcycle\" and \"art\")\r\n   * miniSearch.search('motorcycle art', { combineWith: 'AND' })\r\n   * ```\r\n   *\r\n   * ### Combine with AND_NOT:\r\n   *\r\n   * There is also an AND_NOT combinator, that finds documents that match the\r\n   * first term, but do not match any of the other terms. This combinator is\r\n   * rarely useful with simple queries, and is meant to be used with advanced\r\n   * query combinations (see later for more details).\r\n   *\r\n   * ### Filtering results:\r\n   *\r\n   * ```javascript\r\n   * // Filter only results in the 'fiction' category (assuming that 'category'\r\n   * // is a stored field)\r\n   * miniSearch.search('motorcycle art', {\r\n   *   filter: (result) => result.category === 'fiction'\r\n   * })\r\n   * ```\r\n   *\r\n   * ### Wildcard query\r\n   *\r\n   * Searching for an empty string (assuming the default tokenizer) returns no\r\n   * results. Sometimes though, one needs to match all documents, like in a\r\n   * \"wildcard\" search. This is possible by passing the special value\r\n   * {@link MiniSearch.wildcard} as the query:\r\n   *\r\n   * ```javascript\r\n   * // Return search results for all documents\r\n   * miniSearch.search(MiniSearch.wildcard)\r\n   * ```\r\n   *\r\n   * Note that search options such as `filter` and `boostDocument` are still\r\n   * applied, influencing which results are returned, and their order:\r\n   *\r\n   * ```javascript\r\n   * // Return search results for all documents in the 'fiction' category\r\n   * miniSearch.search(MiniSearch.wildcard, {\r\n   *   filter: (result) => result.category === 'fiction'\r\n   * })\r\n   * ```\r\n   *\r\n   * ### Advanced combination of queries:\r\n   *\r\n   * It is possible to combine different subqueries with OR, AND, and AND_NOT,\r\n   * and even with different search options, by passing a query expression\r\n   * tree object as the first argument, instead of a string.\r\n   *\r\n   * ```javascript\r\n   * // Search for documents that contain \"zen\" and (\"motorcycle\" or \"archery\")\r\n   * miniSearch.search({\r\n   *   combineWith: 'AND',\r\n   *   queries: [\r\n   *     'zen',\r\n   *     {\r\n   *       combineWith: 'OR',\r\n   *       queries: ['motorcycle', 'archery']\r\n   *     }\r\n   *   ]\r\n   * })\r\n   *\r\n   * // Search for documents that contain (\"apple\" or \"pear\") but not \"juice\" and\r\n   * // not \"tree\"\r\n   * miniSearch.search({\r\n   *   combineWith: 'AND_NOT',\r\n   *   queries: [\r\n   *     {\r\n   *       combineWith: 'OR',\r\n   *       queries: ['apple', 'pear']\r\n   *     },\r\n   *     'juice',\r\n   *     'tree'\r\n   *   ]\r\n   * })\r\n   * ```\r\n   *\r\n   * Each node in the expression tree can be either a string, or an object that\r\n   * supports all {@link SearchOptions} fields, plus a `queries` array field for\r\n   * subqueries.\r\n   *\r\n   * Note that, while this can become complicated to do by hand for complex or\r\n   * deeply nested queries, it provides a formalized expression tree API for\r\n   * external libraries that implement a parser for custom query languages.\r\n   *\r\n   * @param query  Search query\r\n   * @param options  Search options. Each option, if not given, defaults to the corresponding value of `searchOptions` given to the constructor, or to the library default.\r\n   */\r\n  search (query: Query, searchOptions: SearchOptions = {}): SearchResult[] {\r\n    const rawResults = this.executeQuery(query, searchOptions)\r\n    const results = []\r\n\r\n    for (const [docId, { score, terms, match }] of rawResults) {\r\n      // terms are the matched query terms, which will be returned to the user\r\n      // as queryTerms. The quality is calculated based on them, as opposed to\r\n      // the matched terms in the document (which can be different due to\r\n      // prefix and fuzzy match)\r\n      const quality = terms.length || 1\r\n\r\n      const result = {\r\n        id: this._documentIds.get(docId),\r\n        score: score * quality,\r\n        terms: Object.keys(match),\r\n        queryTerms: terms,\r\n        match\r\n      }\r\n\r\n      Object.assign(result, this._storedFields.get(docId))\r\n      if (searchOptions.filter == null || searchOptions.filter(result)) {\r\n        results.push(result)\r\n      }\r\n    }\r\n\r\n    // If it's a wildcard query, and no document boost is applied, skip sorting\r\n    // the results, as all results have the same score of 1\r\n    if (query === MiniSearch.wildcard &&\r\n      searchOptions.boostDocument == null &&\r\n      this._options.searchOptions.boostDocument == null) {\r\n      return results\r\n    }\r\n\r\n    results.sort(byScore)\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * Provide suggestions for the given search query\r\n   *\r\n   * The result is a list of suggested modified search queries, derived from the\r\n   * given search query, each with a relevance score, sorted by descending score.\r\n   *\r\n   * By default, it uses the same options used for search, except that by\r\n   * default it performs prefix search on the last term of the query, and\r\n   * combine terms with `'AND'` (requiring all query terms to match). Custom\r\n   * options can be passed as a second argument. Defaults can be changed upon\r\n   * calling the {@link MiniSearch} constructor, by passing a\r\n   * `autoSuggestOptions` option.\r\n   *\r\n   * ### Basic usage:\r\n   *\r\n   * ```javascript\r\n   * // Get suggestions for 'neuro':\r\n   * miniSearch.autoSuggest('neuro')\r\n   * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 0.46240 } ]\r\n   * ```\r\n   *\r\n   * ### Multiple words:\r\n   *\r\n   * ```javascript\r\n   * // Get suggestions for 'zen ar':\r\n   * miniSearch.autoSuggest('zen ar')\r\n   * // => [\r\n   * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },\r\n   * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }\r\n   * // ]\r\n   * ```\r\n   *\r\n   * ### Fuzzy suggestions:\r\n   *\r\n   * ```javascript\r\n   * // Correct spelling mistakes using fuzzy search:\r\n   * miniSearch.autoSuggest('neromancer', { fuzzy: 0.2 })\r\n   * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 1.03998 } ]\r\n   * ```\r\n   *\r\n   * ### Filtering:\r\n   *\r\n   * ```javascript\r\n   * // Get suggestions for 'zen ar', but only within the 'fiction' category\r\n   * // (assuming that 'category' is a stored field):\r\n   * miniSearch.autoSuggest('zen ar', {\r\n   *   filter: (result) => result.category === 'fiction'\r\n   * })\r\n   * // => [\r\n   * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },\r\n   * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }\r\n   * // ]\r\n   * ```\r\n   *\r\n   * @param queryString  Query string to be expanded into suggestions\r\n   * @param options  Search options. The supported options and default values\r\n   * are the same as for the {@link MiniSearch#search} method, except that by\r\n   * default prefix search is performed on the last term in the query, and terms\r\n   * are combined with `'AND'`.\r\n   * @return  A sorted array of suggestions sorted by relevance score.\r\n   */\r\n  autoSuggest (queryString: string, options: SearchOptions = {}): Suggestion[] {\r\n    options = { ...this._options.autoSuggestOptions, ...options }\r\n\r\n    const suggestions: Map<string, Omit<Suggestion, 'suggestion'> & { count: number }> = new Map()\r\n\r\n    for (const { score, terms } of this.search(queryString, options)) {\r\n      const phrase = terms.join(' ')\r\n      const suggestion = suggestions.get(phrase)\r\n      if (suggestion != null) {\r\n        suggestion.score += score\r\n        suggestion.count += 1\r\n      } else {\r\n        suggestions.set(phrase, { score, terms, count: 1 })\r\n      }\r\n    }\r\n\r\n    const results = []\r\n    for (const [suggestion, { score, terms, count }] of suggestions) {\r\n      results.push({ suggestion, terms, score: score / count })\r\n    }\r\n\r\n    results.sort(byScore)\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * Total number of documents available to search\r\n   */\r\n  get documentCount (): number {\r\n    return this._documentCount\r\n  }\r\n\r\n  /**\r\n   * Number of terms in the index\r\n   */\r\n  get termCount (): number {\r\n    return this._index.size\r\n  }\r\n\r\n  /**\r\n   * Deserializes a JSON index (serialized with `JSON.stringify(miniSearch)`)\r\n   * and instantiates a MiniSearch instance. It should be given the same options\r\n   * originally used when serializing the index.\r\n   *\r\n   * ### Usage:\r\n   *\r\n   * ```javascript\r\n   * // If the index was serialized with:\r\n   * let miniSearch = new MiniSearch({ fields: ['title', 'text'] })\r\n   * miniSearch.addAll(documents)\r\n   *\r\n   * const json = JSON.stringify(miniSearch)\r\n   * // It can later be deserialized like this:\r\n   * miniSearch = MiniSearch.loadJSON(json, { fields: ['title', 'text'] })\r\n   * ```\r\n   *\r\n   * @param json  JSON-serialized index\r\n   * @param options  configuration options, same as the constructor\r\n   * @return An instance of MiniSearch deserialized from the given JSON.\r\n   */\r\n  static loadJSON<T = any> (json: string, options: Options<T>): MiniSearch<T> {\r\n    if (options == null) {\r\n      throw new Error('MiniSearch: loadJSON should be given the same options used when serializing the index')\r\n    }\r\n    return this.loadJS(JSON.parse(json), options)\r\n  }\r\n\r\n  /**\r\n   * Async equivalent of {@link MiniSearch.loadJSON}\r\n   *\r\n   * This function is an alternative to {@link MiniSearch.loadJSON} that returns\r\n   * a promise, and loads the index in batches, leaving pauses between them to avoid\r\n   * blocking the main thread. It tends to be slower than the synchronous\r\n   * version, but does not block the main thread, so it can be a better choice\r\n   * when deserializing very large indexes.\r\n   *\r\n   * @param json  JSON-serialized index\r\n   * @param options  configuration options, same as the constructor\r\n   * @return A Promise that will resolve to an instance of MiniSearch deserialized from the given JSON.\r\n   */\r\n  static async loadJSONAsync<T = any> (json: string, options: Options<T>): Promise<MiniSearch<T>> {\r\n    if (options == null) {\r\n      throw new Error('MiniSearch: loadJSON should be given the same options used when serializing the index')\r\n    }\r\n    return this.loadJSAsync(JSON.parse(json), options)\r\n  }\r\n\r\n  /**\r\n   * Returns the default value of an option. It will throw an error if no option\r\n   * with the given name exists.\r\n   *\r\n   * @param optionName  Name of the option\r\n   * @return The default value of the given option\r\n   *\r\n   * ### Usage:\r\n   *\r\n   * ```javascript\r\n   * // Get default tokenizer\r\n   * MiniSearch.getDefault('tokenize')\r\n   *\r\n   * // Get default term processor\r\n   * MiniSearch.getDefault('processTerm')\r\n   *\r\n   * // Unknown options will throw an error\r\n   * MiniSearch.getDefault('notExisting')\r\n   * // => throws 'MiniSearch: unknown option \"notExisting\"'\r\n   * ```\r\n   */\r\n  static getDefault (optionName: string): any {\r\n    if (defaultOptions.hasOwnProperty(optionName)) {\r\n      return getOwnProperty(defaultOptions, optionName)\r\n    } else {\r\n      throw new Error(`MiniSearch: unknown option \"${optionName}\"`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  static loadJS<T = any> (js: AsPlainObject, options: Options<T>): MiniSearch<T> {\r\n    const {\r\n      index,\r\n      documentIds,\r\n      fieldLength,\r\n      storedFields,\r\n      serializationVersion\r\n    } = js\r\n\r\n    const miniSearch = this.instantiateMiniSearch(js, options)\r\n\r\n    miniSearch._documentIds = objectToNumericMap(documentIds)\r\n    miniSearch._fieldLength = objectToNumericMap(fieldLength)\r\n    miniSearch._storedFields = objectToNumericMap(storedFields)\r\n\r\n    for (const [shortId, id] of miniSearch._documentIds) {\r\n      miniSearch._idToShortId.set(id, shortId)\r\n    }\r\n\r\n    for (const [term, data] of index) {\r\n      const dataMap = new Map() as FieldTermData\r\n\r\n      for (const fieldId of Object.keys(data)) {\r\n        let indexEntry = data[fieldId]\r\n\r\n        // Version 1 used to nest the index entry inside a field called ds\r\n        if (serializationVersion === 1) {\r\n          indexEntry = indexEntry.ds as unknown as SerializedIndexEntry\r\n        }\r\n\r\n        dataMap.set(parseInt(fieldId, 10), objectToNumericMap(indexEntry) as DocumentTermFreqs)\r\n      }\r\n\r\n      miniSearch._index.set(term, dataMap)\r\n    }\r\n\r\n    return miniSearch\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  static async loadJSAsync<T = any> (js: AsPlainObject, options: Options<T>): Promise<MiniSearch<T>> {\r\n    const {\r\n      index,\r\n      documentIds,\r\n      fieldLength,\r\n      storedFields,\r\n      serializationVersion\r\n    } = js\r\n\r\n    const miniSearch = this.instantiateMiniSearch(js, options)\r\n\r\n    miniSearch._documentIds = await objectToNumericMapAsync(documentIds)\r\n    miniSearch._fieldLength = await objectToNumericMapAsync(fieldLength)\r\n    miniSearch._storedFields = await objectToNumericMapAsync(storedFields)\r\n\r\n    for (const [shortId, id] of miniSearch._documentIds) {\r\n      miniSearch._idToShortId.set(id, shortId)\r\n    }\r\n\r\n    let count = 0\r\n    for (const [term, data] of index) {\r\n      const dataMap = new Map() as FieldTermData\r\n\r\n      for (const fieldId of Object.keys(data)) {\r\n        let indexEntry = data[fieldId]\r\n\r\n        // Version 1 used to nest the index entry inside a field called ds\r\n        if (serializationVersion === 1) {\r\n          indexEntry = indexEntry.ds as unknown as SerializedIndexEntry\r\n        }\r\n\r\n        dataMap.set(parseInt(fieldId, 10), await objectToNumericMapAsync(indexEntry) as DocumentTermFreqs)\r\n      }\r\n\r\n      if (++count % 1000 === 0) await wait(0)\r\n      miniSearch._index.set(term, dataMap)\r\n    }\r\n\r\n    return miniSearch\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private static instantiateMiniSearch<T = any> (js: AsPlainObject, options: Options<T>): MiniSearch<T> {\r\n    const {\r\n      documentCount,\r\n      nextId,\r\n      fieldIds,\r\n      averageFieldLength,\r\n      dirtCount,\r\n      serializationVersion\r\n    } = js\r\n\r\n    if (serializationVersion !== 1 && serializationVersion !== 2) {\r\n      throw new Error('MiniSearch: cannot deserialize an index created with an incompatible version')\r\n    }\r\n\r\n    const miniSearch = new MiniSearch(options)\r\n\r\n    miniSearch._documentCount = documentCount\r\n    miniSearch._nextId = nextId\r\n    miniSearch._idToShortId = new Map<any, number>()\r\n    miniSearch._fieldIds = fieldIds\r\n    miniSearch._avgFieldLength = averageFieldLength\r\n    miniSearch._dirtCount = dirtCount || 0\r\n    miniSearch._index = new SearchableMap()\r\n\r\n    return miniSearch\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private executeQuery (query: Query, searchOptions: SearchOptions = {}): RawResult {\r\n    if (query === MiniSearch.wildcard) {\r\n      return this.executeWildcardQuery(searchOptions)\r\n    }\r\n\r\n    if (typeof query !== 'string') {\r\n      const options = { ...searchOptions, ...query, queries: undefined }\r\n      const results = query.queries.map((subquery) => this.executeQuery(subquery, options))\r\n      return this.combineResults(results, options.combineWith)\r\n    }\r\n\r\n    const { tokenize, processTerm, searchOptions: globalSearchOptions } = this._options\r\n    const options = { tokenize, processTerm, ...globalSearchOptions, ...searchOptions }\r\n    const { tokenize: searchTokenize, processTerm: searchProcessTerm } = options\r\n    const terms = searchTokenize(query)\r\n      .flatMap((term: string) => searchProcessTerm(term))\r\n      .filter((term) => !!term) as string[]\r\n    const queries: QuerySpec[] = terms.map(termToQuerySpec(options))\r\n    const results = queries.map(query => this.executeQuerySpec(query, options))\r\n\r\n    return this.combineResults(results, options.combineWith)\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private executeQuerySpec (query: QuerySpec, searchOptions: SearchOptions): RawResult {\r\n    const options: SearchOptionsWithDefaults = { ...this._options.searchOptions, ...searchOptions }\r\n\r\n    const boosts = (options.fields || this._options.fields).reduce((boosts, field) =>\r\n      ({ ...boosts, [field]: getOwnProperty(options.boost, field) || 1 }), {})\r\n\r\n    const {\r\n      boostDocument,\r\n      weights,\r\n      maxFuzzy,\r\n      bm25: bm25params\r\n    } = options\r\n\r\n    const { fuzzy: fuzzyWeight, prefix: prefixWeight } = { ...defaultSearchOptions.weights, ...weights }\r\n\r\n    const data = this._index.get(query.term)\r\n    const results = this.termResults(query.term, query.term, 1, query.termBoost, data, boosts, boostDocument, bm25params)\r\n\r\n    let prefixMatches\r\n    let fuzzyMatches\r\n\r\n    if (query.prefix) {\r\n      prefixMatches = this._index.atPrefix(query.term)\r\n    }\r\n\r\n    if (query.fuzzy) {\r\n      const fuzzy = (query.fuzzy === true) ? 0.2 : query.fuzzy\r\n      const maxDistance = fuzzy < 1 ? Math.min(maxFuzzy, Math.round(query.term.length * fuzzy)) : fuzzy\r\n      if (maxDistance) fuzzyMatches = this._index.fuzzyGet(query.term, maxDistance)\r\n    }\r\n\r\n    if (prefixMatches) {\r\n      for (const [term, data] of prefixMatches) {\r\n        const distance = term.length - query.term.length\r\n        if (!distance) { continue } // Skip exact match.\r\n\r\n        // Delete the term from fuzzy results (if present) if it is also a\r\n        // prefix result. This entry will always be scored as a prefix result.\r\n        fuzzyMatches?.delete(term)\r\n\r\n        // Weight gradually approaches 0 as distance goes to infinity, with the\r\n        // weight for the hypothetical distance 0 being equal to prefixWeight.\r\n        // The rate of change is much lower than that of fuzzy matches to\r\n        // account for the fact that prefix matches stay more relevant than\r\n        // fuzzy matches for longer distances.\r\n        const weight = prefixWeight * term.length / (term.length + 0.3 * distance)\r\n        this.termResults(query.term, term, weight, query.termBoost, data, boosts, boostDocument, bm25params, results)\r\n      }\r\n    }\r\n\r\n    if (fuzzyMatches) {\r\n      for (const term of fuzzyMatches.keys()) {\r\n        const [data, distance] = fuzzyMatches.get(term)!\r\n        if (!distance) { continue } // Skip exact match.\r\n\r\n        // Weight gradually approaches 0 as distance goes to infinity, with the\r\n        // weight for the hypothetical distance 0 being equal to fuzzyWeight.\r\n        const weight = fuzzyWeight * term.length / (term.length + distance)\r\n        this.termResults(query.term, term, weight, query.termBoost, data, boosts, boostDocument, bm25params, results)\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private executeWildcardQuery (searchOptions: SearchOptions): RawResult {\r\n    const results = new Map() as RawResult\r\n    const options: SearchOptionsWithDefaults = { ...this._options.searchOptions, ...searchOptions }\r\n\r\n    for (const [shortId, id] of this._documentIds) {\r\n      const score = options.boostDocument ? options.boostDocument(id, '', this._storedFields.get(shortId)) : 1\r\n      results.set(shortId, {\r\n        score,\r\n        terms: [],\r\n        match: {}\r\n      })\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private combineResults (results: RawResult[], combineWith: CombinationOperator = OR): RawResult {\r\n    if (results.length === 0) { return new Map() }\r\n    const operator = combineWith.toLowerCase()\r\n    const combinator = (combinators as Record<string, CombinatorFunction>)[operator]\r\n\r\n    if (!combinator) {\r\n      throw new Error(`Invalid combination operator: ${combineWith}`)\r\n    }\r\n\r\n    return results.reduce(combinator) || new Map()\r\n  }\r\n\r\n  /**\r\n   * Allows serialization of the index to JSON, to possibly store it and later\r\n   * deserialize it with {@link MiniSearch.loadJSON}.\r\n   *\r\n   * Normally one does not directly call this method, but rather call the\r\n   * standard JavaScript `JSON.stringify()` passing the {@link MiniSearch}\r\n   * instance, and JavaScript will internally call this method. Upon\r\n   * deserialization, one must pass to {@link MiniSearch.loadJSON} the same\r\n   * options used to create the original instance that was serialized.\r\n   *\r\n   * ### Usage:\r\n   *\r\n   * ```javascript\r\n   * // Serialize the index:\r\n   * let miniSearch = new MiniSearch({ fields: ['title', 'text'] })\r\n   * miniSearch.addAll(documents)\r\n   * const json = JSON.stringify(miniSearch)\r\n   *\r\n   * // Later, to deserialize it:\r\n   * miniSearch = MiniSearch.loadJSON(json, { fields: ['title', 'text'] })\r\n   * ```\r\n   *\r\n   * @return A plain-object serializable representation of the search index.\r\n   */\r\n  toJSON (): AsPlainObject {\r\n    const index: [string, { [key: string]: SerializedIndexEntry }][] = []\r\n\r\n    for (const [term, fieldIndex] of this._index) {\r\n      const data: { [key: string]: SerializedIndexEntry } = {}\r\n\r\n      for (const [fieldId, freqs] of fieldIndex) {\r\n        data[fieldId] = Object.fromEntries(freqs)\r\n      }\r\n\r\n      index.push([term, data])\r\n    }\r\n\r\n    return {\r\n      documentCount: this._documentCount,\r\n      nextId: this._nextId,\r\n      documentIds: Object.fromEntries(this._documentIds),\r\n      fieldIds: this._fieldIds,\r\n      fieldLength: Object.fromEntries(this._fieldLength),\r\n      averageFieldLength: this._avgFieldLength,\r\n      storedFields: Object.fromEntries(this._storedFields),\r\n      dirtCount: this._dirtCount,\r\n      index,\r\n      serializationVersion: 2\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private termResults (\r\n    sourceTerm: string,\r\n    derivedTerm: string,\r\n    termWeight: number,\r\n    termBoost: number,\r\n    fieldTermData: FieldTermData | undefined,\r\n    fieldBoosts: { [field: string]: number },\r\n    boostDocumentFn: ((id: any, term: string, storedFields?: Record<string, unknown>) => number) | undefined,\r\n    bm25params: BM25Params,\r\n    results: RawResult = new Map()\r\n  ): RawResult {\r\n    if (fieldTermData == null) return results\r\n\r\n    for (const field of Object.keys(fieldBoosts)) {\r\n      const fieldBoost = fieldBoosts[field]\r\n      const fieldId = this._fieldIds[field]\r\n\r\n      const fieldTermFreqs = fieldTermData.get(fieldId)\r\n      if (fieldTermFreqs == null) continue\r\n\r\n      let matchingFields = fieldTermFreqs.size\r\n      const avgFieldLength = this._avgFieldLength[fieldId]\r\n\r\n      for (const docId of fieldTermFreqs.keys()) {\r\n        if (!this._documentIds.has(docId)) {\r\n          this.removeTerm(fieldId, docId, derivedTerm)\r\n          matchingFields -= 1\r\n          continue\r\n        }\r\n\r\n        const docBoost = boostDocumentFn ? boostDocumentFn(this._documentIds.get(docId), derivedTerm, this._storedFields.get(docId)) : 1\r\n        if (!docBoost) continue\r\n\r\n        const termFreq = fieldTermFreqs.get(docId)!\r\n        const fieldLength = this._fieldLength.get(docId)![fieldId]\r\n\r\n        // NOTE: The total number of fields is set to the number of documents\r\n        // `this._documentCount`. It could also make sense to use the number of\r\n        // documents where the current field is non-blank as a normalization\r\n        // factor. This will make a difference in scoring if the field is rarely\r\n        // present. This is currently not supported, and may require further\r\n        // analysis to see if it is a valid use case.\r\n        const rawScore = calcBM25Score(termFreq, matchingFields, this._documentCount, fieldLength, avgFieldLength, bm25params)\r\n        const weightedScore = termWeight * termBoost * fieldBoost * docBoost * rawScore\r\n\r\n        const result = results.get(docId)\r\n        if (result) {\r\n          result.score += weightedScore\r\n          assignUniqueTerm(result.terms, sourceTerm)\r\n          const match = getOwnProperty(result.match, derivedTerm)\r\n          if (match) {\r\n            match.push(field)\r\n          } else {\r\n            result.match[derivedTerm] = [field]\r\n          }\r\n        } else {\r\n          results.set(docId, {\r\n            score: weightedScore,\r\n            terms: [sourceTerm],\r\n            match: { [derivedTerm]: [field] }\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private addTerm (fieldId: number, documentId: number, term: string): void {\r\n    const indexData = this._index.fetch(term, createMap)\r\n\r\n    let fieldIndex = indexData.get(fieldId)\r\n    if (fieldIndex == null) {\r\n      fieldIndex = new Map()\r\n      fieldIndex.set(documentId, 1)\r\n      indexData.set(fieldId, fieldIndex)\r\n    } else {\r\n      const docs = fieldIndex.get(documentId)\r\n      fieldIndex.set(documentId, (docs || 0) + 1)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private removeTerm (fieldId: number, documentId: number, term: string): void {\r\n    if (!this._index.has(term)) {\r\n      this.warnDocumentChanged(documentId, fieldId, term)\r\n      return\r\n    }\r\n\r\n    const indexData = this._index.fetch(term, createMap)\r\n\r\n    const fieldIndex = indexData.get(fieldId)\r\n    if (fieldIndex == null || fieldIndex.get(documentId) == null) {\r\n      this.warnDocumentChanged(documentId, fieldId, term)\r\n    } else if (fieldIndex.get(documentId)! <= 1) {\r\n      if (fieldIndex.size <= 1) {\r\n        indexData.delete(fieldId)\r\n      } else {\r\n        fieldIndex.delete(documentId)\r\n      }\r\n    } else {\r\n      fieldIndex.set(documentId, fieldIndex.get(documentId)! - 1)\r\n    }\r\n\r\n    if (this._index.get(term)!.size === 0) {\r\n      this._index.delete(term)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private warnDocumentChanged (shortDocumentId: number, fieldId: number, term: string): void {\r\n    for (const fieldName of Object.keys(this._fieldIds)) {\r\n      if (this._fieldIds[fieldName] === fieldId) {\r\n        this._options.logger('warn', `MiniSearch: document with ID ${this._documentIds.get(shortDocumentId)} has changed before removal: term \"${term}\" was not present in field \"${fieldName}\". Removing a document after it has changed can corrupt the index!`, 'version_conflict')\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private addDocumentId (documentId: any): number {\r\n    const shortDocumentId = this._nextId\r\n    this._idToShortId.set(documentId, shortDocumentId)\r\n    this._documentIds.set(shortDocumentId, documentId)\r\n    this._documentCount += 1\r\n    this._nextId += 1\r\n    return shortDocumentId\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private addFields (fields: string[]): void {\r\n    for (let i = 0; i < fields.length; i++) {\r\n      this._fieldIds[fields[i]] = i\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private addFieldLength (documentId: number, fieldId: number, count: number, length: number): void {\r\n    let fieldLengths = this._fieldLength.get(documentId)\r\n    if (fieldLengths == null) this._fieldLength.set(documentId, fieldLengths = [])\r\n    fieldLengths[fieldId] = length\r\n\r\n    const averageFieldLength = this._avgFieldLength[fieldId] || 0\r\n    const totalFieldLength = (averageFieldLength * count) + length\r\n    this._avgFieldLength[fieldId] = totalFieldLength / (count + 1)\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private removeFieldLength (documentId: number, fieldId: number, count: number, length: number): void {\r\n    if (count === 1) {\r\n      this._avgFieldLength[fieldId] = 0\r\n      return\r\n    }\r\n    const totalFieldLength = (this._avgFieldLength[fieldId] * count) - length\r\n    this._avgFieldLength[fieldId] = totalFieldLength / (count - 1)\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private saveStoredFields (documentId: number, doc: T): void {\r\n    const { storeFields, extractField } = this._options\r\n    if (storeFields == null || storeFields.length === 0) { return }\r\n\r\n    let documentFields = this._storedFields.get(documentId)\r\n    if (documentFields == null) this._storedFields.set(documentId, documentFields = {})\r\n\r\n    for (const fieldName of storeFields) {\r\n      const fieldValue = extractField(doc, fieldName)\r\n      if (fieldValue !== undefined) documentFields[fieldName] = fieldValue\r\n    }\r\n  }\r\n}\r\n\r\nconst getOwnProperty = (object: any, property: string) =>\r\n  Object.prototype.hasOwnProperty.call(object, property) ? object[property] : undefined\r\n\r\ntype CombinatorFunction = (a: RawResult, b: RawResult) => RawResult\r\n\r\nconst combinators: Record<LowercaseCombinationOperator, CombinatorFunction> = {\r\n  [OR]: (a: RawResult, b: RawResult) => {\r\n    for (const docId of b.keys()) {\r\n      const existing = a.get(docId)\r\n      if (existing == null) {\r\n        a.set(docId, b.get(docId)!)\r\n      } else {\r\n        const { score, terms, match } = b.get(docId)!\r\n        existing.score = existing.score + score\r\n        existing.match = Object.assign(existing.match, match)\r\n        assignUniqueTerms(existing.terms, terms)\r\n      }\r\n    }\r\n\r\n    return a\r\n  },\r\n  [AND]: (a: RawResult, b: RawResult) => {\r\n    const combined = new Map()\r\n\r\n    for (const docId of b.keys()) {\r\n      const existing = a.get(docId)\r\n      if (existing == null) continue\r\n\r\n      const { score, terms, match } = b.get(docId)!\r\n      assignUniqueTerms(existing.terms, terms)\r\n      combined.set(docId, {\r\n        score: existing.score + score,\r\n        terms: existing.terms,\r\n        match: Object.assign(existing.match, match)\r\n      })\r\n    }\r\n\r\n    return combined\r\n  },\r\n  [AND_NOT]: (a: RawResult, b: RawResult) => {\r\n    for (const docId of b.keys()) a.delete(docId)\r\n    return a\r\n  }\r\n}\r\n\r\n/**\r\n * Parameters of the BM25+ scoring algorithm. Customizing these is almost never\r\n * necessary, and finetuning them requires an understanding of the BM25 scoring\r\n * model.\r\n *\r\n * Some information about BM25 (and BM25+) can be found at these links:\r\n *\r\n *   - https://en.wikipedia.org/wiki/Okapi_BM25\r\n *   - https://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation/\r\n */\r\nexport type BM25Params = {\r\n  /** Term frequency saturation point.\r\n   *\r\n   * Recommended values are between `1.2` and `2`. Higher values increase the\r\n   * difference in score between documents with higher and lower term\r\n   * frequencies. Setting this to `0` or a negative value is invalid. Defaults\r\n   * to `1.2`\r\n   */\r\n  k: number,\r\n\r\n  /**\r\n   * Length normalization impact.\r\n   *\r\n   * Recommended values are around `0.75`. Higher values increase the weight\r\n   * that field length has on scoring. Setting this to `0` (not recommended)\r\n   * means that the field length has no effect on scoring. Negative values are\r\n   * invalid. Defaults to `0.7`.\r\n   */\r\n  b: number,\r\n\r\n  /**\r\n   * BM25+ frequency normalization lower bound (usually called δ).\r\n   *\r\n   * Recommended values are between `0.5` and `1`. Increasing this parameter\r\n   * increases the minimum relevance of one occurrence of a search term\r\n   * regardless of its (possibly very long) field length. Negative values are\r\n   * invalid. Defaults to `0.5`.\r\n   */\r\n  d: number\r\n}\r\n\r\nconst defaultBM25params: BM25Params = { k: 1.2, b: 0.7, d: 0.5 }\r\n\r\nconst calcBM25Score = (\r\n  termFreq: number,\r\n  matchingCount: number,\r\n  totalCount: number,\r\n  fieldLength: number,\r\n  avgFieldLength: number,\r\n  bm25params: BM25Params\r\n): number => {\r\n  const { k, b, d } = bm25params\r\n  const invDocFreq = Math.log(1 + (totalCount - matchingCount + 0.5) / (matchingCount + 0.5))\r\n  return invDocFreq * (d + termFreq * (k + 1) / (termFreq + k * (1 - b + b * fieldLength / avgFieldLength)))\r\n}\r\n\r\nconst termToQuerySpec = (options: SearchOptions) => (term: string, i: number, terms: string[]): QuerySpec => {\r\n  const fuzzy = (typeof options.fuzzy === 'function')\r\n    ? options.fuzzy(term, i, terms)\r\n    : (options.fuzzy || false)\r\n  const prefix = (typeof options.prefix === 'function')\r\n    ? options.prefix(term, i, terms)\r\n    : (options.prefix === true)\r\n  const termBoost = (typeof options.boostTerm === 'function')\r\n    ? options.boostTerm(term, i, terms)\r\n    : 1\r\n  return { term, fuzzy, prefix, termBoost }\r\n}\r\n\r\nconst defaultOptions = {\r\n  idField: 'id',\r\n  extractField: (document: any, fieldName: string) => document[fieldName],\r\n  tokenize: (text: string) => text.split(SPACE_OR_PUNCTUATION),\r\n  processTerm: (term: string) => term.toLowerCase(),\r\n  fields: undefined,\r\n  searchOptions: undefined,\r\n  storeFields: [],\r\n  logger: (level: LogLevel, message: string): void => {\r\n    if (typeof console?.[level] === 'function') console[level](message)\r\n  },\r\n  autoVacuum: true\r\n}\r\n\r\nconst defaultSearchOptions = {\r\n  combineWith: OR,\r\n  prefix: false,\r\n  fuzzy: false,\r\n  maxFuzzy: 6,\r\n  boost: {},\r\n  weights: { fuzzy: 0.45, prefix: 0.375 },\r\n  bm25: defaultBM25params\r\n}\r\n\r\nconst defaultAutoSuggestOptions = {\r\n  combineWith: AND,\r\n  prefix: (term: string, i: number, terms: string[]): boolean =>\r\n    i === terms.length - 1\r\n}\r\n\r\nconst defaultVacuumOptions = { batchSize: 1000, batchWait: 10 }\r\nconst defaultVacuumConditions = { minDirtFactor: 0.1, minDirtCount: 20 }\r\n\r\nconst defaultAutoVacuumOptions = { ...defaultVacuumOptions, ...defaultVacuumConditions }\r\n\r\nconst assignUniqueTerm = (target: string[], term: string): void => {\r\n  // Avoid adding duplicate terms.\r\n  if (!target.includes(term)) target.push(term)\r\n}\r\n\r\nconst assignUniqueTerms = (target: string[], source: readonly string[]): void => {\r\n  for (const term of source) {\r\n    // Avoid adding duplicate terms.\r\n    if (!target.includes(term)) target.push(term)\r\n  }\r\n}\r\n\r\ntype Scored = { score: number }\r\nconst byScore = ({ score: a }: Scored, { score: b }: Scored) => b - a\r\n\r\nconst createMap = () => new Map()\r\n\r\ninterface SerializedIndexEntry {\r\n  [key: string]: number\r\n}\r\n\r\nconst objectToNumericMap = <T>(object: { [key: string]: T }): Map<number, T> => {\r\n  const map = new Map()\r\n\r\n  for (const key of Object.keys(object)) {\r\n    map.set(parseInt(key, 10), object[key])\r\n  }\r\n\r\n  return map\r\n}\r\n\r\nconst objectToNumericMapAsync = async <T>(object: { [key: string]: T }): Promise<Map<number, T>> => {\r\n  const map = new Map()\r\n\r\n  let count = 0\r\n  for (const key of Object.keys(object)) {\r\n    map.set(parseInt(key, 10), object[key])\r\n    if (++count % 1000 === 0) {\r\n      await wait(0)\r\n    }\r\n  }\r\n\r\n  return map\r\n}\r\n\r\nconst wait = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\r\n\r\n// This regular expression matches any Unicode space, newline, or punctuation\r\n// character\r\nconst SPACE_OR_PUNCTUATION = /[\\n\\r\\p{Z}\\p{P}]+/u\r\n"],
  "mappings": "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",
  "names": ["last", "node", "child", "key", "chunk", "promise", "conditions", "options", "results", "query", "boosts", "data"]
}
