(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@algolia/ingestion"] = {}));
})(this, (function (exports) { 'use strict';

	function V(){function a(o){return new Promise(d=>{let m=new XMLHttpRequest;m.open(o.method,o.url,!0),Object.keys(o.headers).forEach(n=>m.setRequestHeader(n,o.headers[n]));let h=(n,e)=>setTimeout(()=>{m.abort(),d({status:0,content:e,isTimedOut:!0});},n),T=h(o.connectTimeout,"Connection timeout"),y;m.onreadystatechange=()=>{m.readyState>m.OPENED&&y===void 0&&(clearTimeout(T),y=h(o.responseTimeout,"Socket timeout"));},m.onerror=()=>{m.status===0&&(clearTimeout(T),clearTimeout(y),d({content:m.responseText||"Network request failed",status:m.status,isTimedOut:!1}));},m.onload=()=>{clearTimeout(T),clearTimeout(y),d({content:m.responseText,status:m.status,isTimedOut:!1});},m.send(o.data);})}return {send:a}}function N(a){let o,d=`algolia-client-js-${a.key}`;function m(){return o===void 0&&(o=a.localStorage||window.localStorage),o}function h(){return JSON.parse(m().getItem(d)||"{}")}function T(n){m().setItem(d,JSON.stringify(n));}function y(){let n=a.timeToLive?a.timeToLive*1e3:null,e=h(),r=Object.fromEntries(Object.entries(e).filter(([,i])=>i.timestamp!==void 0));if(T(r),!n)return;let s=Object.fromEntries(Object.entries(r).filter(([,i])=>{let u=new Date().getTime();return !(i.timestamp+n<u)}));T(s);}return {get(n,e,r={miss:()=>Promise.resolve()}){return Promise.resolve().then(()=>(y(),h()[JSON.stringify(n)])).then(s=>Promise.all([s?s.value:e(),s!==void 0])).then(([s,i])=>Promise.all([s,i||r.miss(s)])).then(([s])=>s)},set(n,e){return Promise.resolve().then(()=>{let r=h();return r[JSON.stringify(n)]={timestamp:new Date().getTime(),value:e},m().setItem(d,JSON.stringify(r)),e})},delete(n){return Promise.resolve().then(()=>{let e=h();delete e[JSON.stringify(n)],m().setItem(d,JSON.stringify(e));})},clear(){return Promise.resolve().then(()=>{m().removeItem(d);})}}}function ee(){return {get(a,o,d={miss:()=>Promise.resolve()}){return o().then(h=>Promise.all([h,d.miss(h)])).then(([h])=>h)},set(a,o){return Promise.resolve(o)},delete(a){return Promise.resolve()},clear(){return Promise.resolve()}}}function S(a){let o=[...a.caches],d=o.shift();return d===void 0?ee():{get(m,h,T={miss:()=>Promise.resolve()}){return d.get(m,h,T).catch(()=>S({caches:o}).get(m,h,T))},set(m,h){return d.set(m,h).catch(()=>S({caches:o}).set(m,h))},delete(m){return d.delete(m).catch(()=>S({caches:o}).delete(m))},clear(){return d.clear().catch(()=>S({caches:o}).clear())}}}function k(a={serializable:!0}){let o={};return {get(d,m,h={miss:()=>Promise.resolve()}){let T=JSON.stringify(d);if(T in o)return Promise.resolve(a.serializable?JSON.parse(o[T]):o[T]);let y=m();return y.then(n=>h.miss(n)).then(()=>y)},set(d,m){return o[JSON.stringify(d)]=a.serializable?JSON.stringify(m):m,Promise.resolve(m)},delete(d){return delete o[JSON.stringify(d)],Promise.resolve()},clear(){return o={},Promise.resolve()}}}var W=1e3,B=2e3,$=3e4;function re(a){let o={value:`Algolia for JavaScript (${a})`,add(d){let m=`; ${d.segment}${d.version!==void 0?` (${d.version})`:""}`;return o.value.indexOf(m)===-1&&(o.value=`${o.value}${m}`),o}};return o}function j(a,o,d="WithinHeaders"){let m={"x-algolia-api-key":o,"x-algolia-application-id":a};return {headers(){return d==="WithinHeaders"?m:{}},queryParameters(){return d==="WithinQueryParameters"?m:{}}}}function J({algoliaAgents:a,client:o,version:d}){let m=re(d).add({segment:o,version:d});return a.forEach(h=>m.add(h)),m}function M(){return {debug(a,o){return Promise.resolve()},info(a,o){return Promise.resolve()},error(a,o){return Promise.resolve()}}}var G=2*60*1e3;function _(a,o="up"){let d=Date.now();function m(){return o==="up"||Date.now()-d>G}function h(){return o==="timed out"&&Date.now()-d<=G}return {...a,status:o,lastUpdate:d,isUp:m,isTimedOut:h}}var z=class extends Error{name="AlgoliaError";constructor(a,o){super(a),o&&(this.name=o);}},F=class extends z{stackTrace;constructor(a,o,d){super(a,d),this.stackTrace=o;}},te=class extends F{constructor(a){super("Unreachable hosts - your application id may be incorrect. If the error persists, please reach out to the Algolia Support team: https://alg.li/support.",a,"RetryError");}},U=class extends F{status;constructor(a,o,d,m="ApiError"){super(a,d,m),this.status=o;}},se=class extends z{response;constructor(a,o){super(a,"DeserializationError"),this.response=o;}},oe=class extends U{error;constructor(a,o,d,m){super(a,o,m,"DetailedApiError"),this.error=d;}};function ae(a,o,d){let m=ne(d),h=`${a.protocol}://${a.url}${a.port?`:${a.port}`:""}/${o.charAt(0)==="/"?o.substring(1):o}`;return m.length&&(h+=`?${m}`),h}function ne(a){return Object.keys(a).filter(o=>a[o]!==void 0).sort().map(o=>`${o}=${encodeURIComponent(Object.prototype.toString.call(a[o])==="[object Array]"?a[o].join(","):a[o]).replace(/\+/g,"%20")}`).join("&")}function ie(a,o){if(a.method==="GET"||a.data===void 0&&o.data===void 0)return;let d=Array.isArray(a.data)?a.data:{...a.data,...o.data};return JSON.stringify(d)}function ue(a,o,d){let m={Accept:"application/json",...a,...o,...d},h={};return Object.keys(m).forEach(T=>{let y=m[T];h[T.toLowerCase()]=y;}),h}function me(a){try{return JSON.parse(a.content)}catch(o){throw new se(o.message,a)}}function ce({content:a,status:o},d){try{let m=JSON.parse(a);return "error"in m?new oe(m.message,o,m.error,d):new U(m.message,o,d)}catch{}return new U(a,o,d)}function de({isTimedOut:a,status:o}){return !a&&~~o===0}function pe({isTimedOut:a,status:o}){return a||de({isTimedOut:a,status:o})||~~(o/100)!==2&&~~(o/100)!==4}function he({status:a}){return ~~(a/100)===2}function fe(a){return a.map(o=>X(o))}function X(a){let o=a.request.headers["x-algolia-api-key"]?{"x-algolia-api-key":"*****"}:{};return {...a,request:{...a.request,headers:{...a.request.headers,...o}}}}function K({hosts:a,hostsCache:o,baseHeaders:d,logger:m,baseQueryParameters:h,algoliaAgent:T,timeouts:y,requester:n,requestsCache:e,responsesCache:r}){async function s(t){let c=await Promise.all(t.map(g=>o.get(g,()=>Promise.resolve(_(g))))),f=c.filter(g=>g.isUp()),P=c.filter(g=>g.isTimedOut()),l=[...f,...P];return {hosts:l.length>0?l:t,getTimeout(g,p){return (P.length===0&&g===0?1:P.length+3+g)*p}}}async function i(t,c,f=!0){let P=[],l=ie(t,c),q=ue(d,t.headers,c.headers),g=t.method==="GET"?{...t.data,...c.data}:{},p={...h,...t.queryParameters,...g};if(T.value&&(p["x-algolia-agent"]=T.value),c&&c.queryParameters)for(let w of Object.keys(c.queryParameters))!c.queryParameters[w]||Object.prototype.toString.call(c.queryParameters[w])==="[object Object]"?p[w]=c.queryParameters[w]:p[w]=c.queryParameters[w].toString();let R=0,v=async(w,I)=>{let D=w.pop();if(D===void 0)throw new te(fe(P));let O={...y,...c.timeouts},b={data:l,headers:q,method:t.method,url:ae(D,t.path,p),connectTimeout:I(R,O.connect),responseTimeout:I(R,f?O.read:O.write)},Q=C=>{let L={request:b,response:C,host:D,triesLeft:w.length};return P.push(L),L},E=await n.send(b);if(pe(E)){let C=Q(E);return E.isTimedOut&&R++,m.info("Retryable failure",X(C)),await o.set(D,_(D,E.isTimedOut?"timed out":"down")),v(w,I)}if(he(E))return me(E);throw Q(E),ce(E,P)},Z=a.filter(w=>w.accept==="readWrite"||(f?w.accept==="read":w.accept==="write")),H=await s(Z);return v([...H.hosts].reverse(),H.getTimeout)}function u(t,c={}){let f=t.useReadTransporter||t.method==="GET";if(!f)return i(t,c,f);let P=()=>i(t,c);if((c.cacheable||t.cacheable)!==!0)return P();let q={request:t,requestOptions:c,transporter:{queryParameters:h,headers:d}};return r.get(q,()=>e.get(q,()=>e.set(q,P()).then(g=>Promise.all([e.delete(q),g]),g=>Promise.all([e.delete(q),Promise.reject(g)])).then(([g,p])=>p)),{miss:g=>r.set(q,g)})}return {hostsCache:o,requester:n,timeouts:y,logger:m,algoliaAgent:T,baseHeaders:d,baseQueryParameters:h,hosts:a,request:u,requestsCache:e,responsesCache:r}}var x="1.13.0",A=["eu","us"];function le(a){return [{url:"data.{region}.algolia.com".replace("{region}",a),accept:"readWrite",protocol:"https"}]}function Pe(a){return a.type==="onDemand"}function qe(a){return a.type==="schedule"}function ge(a){return a.type==="subscription"}function Y({appId:a,apiKey:o,authMode:d,algoliaAgents:m,region:h,...T}){let y=j(a,o,d),n=K({hosts:le(h),...T,algoliaAgent:J({algoliaAgents:m,client:"Ingestion",version:x}),baseHeaders:{"content-type":"text/plain",...y.headers(),...T.baseHeaders},baseQueryParameters:{...y.queryParameters(),...T.baseQueryParameters}});return {transporter:n,appId:a,clearCache(){return Promise.all([n.requestsCache.clear(),n.responsesCache.clear()]).then(()=>{})},get _ua(){return n.algoliaAgent.value},addAlgoliaAgent(e,r){n.algoliaAgent.add({segment:e,version:r});},setClientApiKey({apiKey:e}){!d||d==="WithinHeaders"?n.baseHeaders["x-algolia-api-key"]=e:n.baseQueryParameters["x-algolia-api-key"]=e;},createAuthentication(e,r){if(!e)throw new Error("Parameter `authenticationCreate` is required when calling `createAuthentication`.");if(!e.type)throw new Error("Parameter `authenticationCreate.type` is required when calling `createAuthentication`.");if(!e.name)throw new Error("Parameter `authenticationCreate.name` is required when calling `createAuthentication`.");if(!e.input)throw new Error("Parameter `authenticationCreate.input` is required when calling `createAuthentication`.");let t={method:"POST",path:"/1/authentications",queryParameters:{},headers:{},data:e};return n.request(t,r)},createDestination(e,r){if(!e)throw new Error("Parameter `destinationCreate` is required when calling `createDestination`.");if(!e.type)throw new Error("Parameter `destinationCreate.type` is required when calling `createDestination`.");if(!e.name)throw new Error("Parameter `destinationCreate.name` is required when calling `createDestination`.");if(!e.input)throw new Error("Parameter `destinationCreate.input` is required when calling `createDestination`.");let t={method:"POST",path:"/1/destinations",queryParameters:{},headers:{},data:e};return n.request(t,r)},createSource(e,r){if(!e)throw new Error("Parameter `sourceCreate` is required when calling `createSource`.");if(!e.type)throw new Error("Parameter `sourceCreate.type` is required when calling `createSource`.");if(!e.name)throw new Error("Parameter `sourceCreate.name` is required when calling `createSource`.");let t={method:"POST",path:"/1/sources",queryParameters:{},headers:{},data:e};return n.request(t,r)},createTask(e,r){if(!e)throw new Error("Parameter `taskCreate` is required when calling `createTask`.");if(!e.sourceID)throw new Error("Parameter `taskCreate.sourceID` is required when calling `createTask`.");if(!e.destinationID)throw new Error("Parameter `taskCreate.destinationID` is required when calling `createTask`.");if(!e.action)throw new Error("Parameter `taskCreate.action` is required when calling `createTask`.");let t={method:"POST",path:"/2/tasks",queryParameters:{},headers:{},data:e};return n.request(t,r)},createTaskV1(e,r){if(!e)throw new Error("Parameter `taskCreate` is required when calling `createTaskV1`.");if(!e.sourceID)throw new Error("Parameter `taskCreate.sourceID` is required when calling `createTaskV1`.");if(!e.destinationID)throw new Error("Parameter `taskCreate.destinationID` is required when calling `createTaskV1`.");if(!e.trigger)throw new Error("Parameter `taskCreate.trigger` is required when calling `createTaskV1`.");if(!e.action)throw new Error("Parameter `taskCreate.action` is required when calling `createTaskV1`.");let t={method:"POST",path:"/1/tasks",queryParameters:{},headers:{},data:e};return n.request(t,r)},createTransformation(e,r){if(!e)throw new Error("Parameter `transformationCreate` is required when calling `createTransformation`.");if(!e.code)throw new Error("Parameter `transformationCreate.code` is required when calling `createTransformation`.");if(!e.name)throw new Error("Parameter `transformationCreate.name` is required when calling `createTransformation`.");let t={method:"POST",path:"/1/transformations",queryParameters:{},headers:{},data:e};return n.request(t,r)},customDelete({path:e,parameters:r},s){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");let c={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return n.request(c,s)},customGet({path:e,parameters:r},s){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");let c={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return n.request(c,s)},customPost({path:e,parameters:r,body:s},i){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");let f={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:s||{}};return n.request(f,i)},customPut({path:e,parameters:r,body:s},i){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");let f={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:s||{}};return n.request(f,i)},deleteAuthentication({authenticationID:e},r){if(!e)throw new Error("Parameter `authenticationID` is required when calling `deleteAuthentication`.");let t={method:"DELETE",path:"/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},deleteDestination({destinationID:e},r){if(!e)throw new Error("Parameter `destinationID` is required when calling `deleteDestination`.");let t={method:"DELETE",path:"/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},deleteSource({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `deleteSource`.");let t={method:"DELETE",path:"/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},deleteTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `deleteTask`.");let t={method:"DELETE",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},deleteTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `deleteTaskV1`.");let t={method:"DELETE",path:"/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},deleteTransformation({transformationID:e},r){if(!e)throw new Error("Parameter `transformationID` is required when calling `deleteTransformation`.");let t={method:"DELETE",path:"/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},disableTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `disableTask`.");let t={method:"PUT",path:"/2/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},disableTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `disableTaskV1`.");let t={method:"PUT",path:"/1/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},enableTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `enableTask`.");let t={method:"PUT",path:"/2/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},enableTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `enableTaskV1`.");let t={method:"PUT",path:"/1/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},getAuthentication({authenticationID:e},r){if(!e)throw new Error("Parameter `authenticationID` is required when calling `getAuthentication`.");let t={method:"GET",path:"/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},getDestination({destinationID:e},r){if(!e)throw new Error("Parameter `destinationID` is required when calling `getDestination`.");let t={method:"GET",path:"/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},getEvent({runID:e,eventID:r},s){if(!e)throw new Error("Parameter `runID` is required when calling `getEvent`.");if(!r)throw new Error("Parameter `eventID` is required when calling `getEvent`.");let c={method:"GET",path:"/1/runs/{runID}/events/{eventID}".replace("{runID}",encodeURIComponent(e)).replace("{eventID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return n.request(c,s)},getRun({runID:e},r){if(!e)throw new Error("Parameter `runID` is required when calling `getRun`.");let t={method:"GET",path:"/1/runs/{runID}".replace("{runID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},getSource({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `getSource`.");let t={method:"GET",path:"/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},getTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getTask`.");let t={method:"GET",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},getTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getTaskV1`.");let t={method:"GET",path:"/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},getTransformation({transformationID:e},r){if(!e)throw new Error("Parameter `transformationID` is required when calling `getTransformation`.");let t={method:"GET",path:"/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},listAuthentications({itemsPerPage:e,page:r,type:s,platform:i,sort:u,order:t}={},c=void 0){let f="/1/authentications",P={},l={};e!==void 0&&(l.itemsPerPage=e.toString()),r!==void 0&&(l.page=r.toString()),s!==void 0&&(l.type=s.toString()),i!==void 0&&(l.platform=i.toString()),u!==void 0&&(l.sort=u.toString()),t!==void 0&&(l.order=t.toString());let q={method:"GET",path:f,queryParameters:l,headers:P};return n.request(q,c)},listDestinations({itemsPerPage:e,page:r,type:s,authenticationID:i,transformationID:u,sort:t,order:c}={},f=void 0){let P="/1/destinations",l={},q={};e!==void 0&&(q.itemsPerPage=e.toString()),r!==void 0&&(q.page=r.toString()),s!==void 0&&(q.type=s.toString()),i!==void 0&&(q.authenticationID=i.toString()),u!==void 0&&(q.transformationID=u.toString()),t!==void 0&&(q.sort=t.toString()),c!==void 0&&(q.order=c.toString());let g={method:"GET",path:P,queryParameters:q,headers:l};return n.request(g,f)},listEvents({runID:e,itemsPerPage:r,page:s,status:i,type:u,sort:t,order:c,startDate:f,endDate:P},l){if(!e)throw new Error("Parameter `runID` is required when calling `listEvents`.");let q="/1/runs/{runID}/events".replace("{runID}",encodeURIComponent(e)),g={},p={};r!==void 0&&(p.itemsPerPage=r.toString()),s!==void 0&&(p.page=s.toString()),i!==void 0&&(p.status=i.toString()),u!==void 0&&(p.type=u.toString()),t!==void 0&&(p.sort=t.toString()),c!==void 0&&(p.order=c.toString()),f!==void 0&&(p.startDate=f.toString()),P!==void 0&&(p.endDate=P.toString());let R={method:"GET",path:q,queryParameters:p,headers:g};return n.request(R,l)},listRuns({itemsPerPage:e,page:r,status:s,type:i,taskID:u,sort:t,order:c,startDate:f,endDate:P}={},l=void 0){let q="/1/runs",g={},p={};e!==void 0&&(p.itemsPerPage=e.toString()),r!==void 0&&(p.page=r.toString()),s!==void 0&&(p.status=s.toString()),i!==void 0&&(p.type=i.toString()),u!==void 0&&(p.taskID=u.toString()),t!==void 0&&(p.sort=t.toString()),c!==void 0&&(p.order=c.toString()),f!==void 0&&(p.startDate=f.toString()),P!==void 0&&(p.endDate=P.toString());let R={method:"GET",path:q,queryParameters:p,headers:g};return n.request(R,l)},listSources({itemsPerPage:e,page:r,type:s,authenticationID:i,sort:u,order:t}={},c=void 0){let f="/1/sources",P={},l={};e!==void 0&&(l.itemsPerPage=e.toString()),r!==void 0&&(l.page=r.toString()),s!==void 0&&(l.type=s.toString()),i!==void 0&&(l.authenticationID=i.toString()),u!==void 0&&(l.sort=u.toString()),t!==void 0&&(l.order=t.toString());let q={method:"GET",path:f,queryParameters:l,headers:P};return n.request(q,c)},listTasks({itemsPerPage:e,page:r,action:s,enabled:i,sourceID:u,destinationID:t,triggerType:c,sort:f,order:P}={},l=void 0){let q="/2/tasks",g={},p={};e!==void 0&&(p.itemsPerPage=e.toString()),r!==void 0&&(p.page=r.toString()),s!==void 0&&(p.action=s.toString()),i!==void 0&&(p.enabled=i.toString()),u!==void 0&&(p.sourceID=u.toString()),t!==void 0&&(p.destinationID=t.toString()),c!==void 0&&(p.triggerType=c.toString()),f!==void 0&&(p.sort=f.toString()),P!==void 0&&(p.order=P.toString());let R={method:"GET",path:q,queryParameters:p,headers:g};return n.request(R,l)},listTasksV1({itemsPerPage:e,page:r,action:s,enabled:i,sourceID:u,destinationID:t,triggerType:c,sort:f,order:P}={},l=void 0){let q="/1/tasks",g={},p={};e!==void 0&&(p.itemsPerPage=e.toString()),r!==void 0&&(p.page=r.toString()),s!==void 0&&(p.action=s.toString()),i!==void 0&&(p.enabled=i.toString()),u!==void 0&&(p.sourceID=u.toString()),t!==void 0&&(p.destinationID=t.toString()),c!==void 0&&(p.triggerType=c.toString()),f!==void 0&&(p.sort=f.toString()),P!==void 0&&(p.order=P.toString());let R={method:"GET",path:q,queryParameters:p,headers:g};return n.request(R,l)},listTransformations({itemsPerPage:e,page:r,sort:s,order:i}={},u=void 0){let t="/1/transformations",c={},f={};e!==void 0&&(f.itemsPerPage=e.toString()),r!==void 0&&(f.page=r.toString()),s!==void 0&&(f.sort=s.toString()),i!==void 0&&(f.order=i.toString());let P={method:"GET",path:t,queryParameters:f,headers:c};return n.request(P,u)},pushTask({taskID:e,pushTaskPayload:r},s){if(!e)throw new Error("Parameter `taskID` is required when calling `pushTask`.");if(!r)throw new Error("Parameter `pushTaskPayload` is required when calling `pushTask`.");if(!r.action)throw new Error("Parameter `pushTaskPayload.action` is required when calling `pushTask`.");if(!r.records)throw new Error("Parameter `pushTaskPayload.records` is required when calling `pushTask`.");let c={method:"POST",path:"/2/tasks/{taskID}/push".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return n.request(c,s)},runSource({sourceID:e,runSourcePayload:r},s){if(!e)throw new Error("Parameter `sourceID` is required when calling `runSource`.");let c={method:"POST",path:"/1/sources/{sourceID}/run".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{}};return n.request(c,s)},runTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `runTask`.");let t={method:"POST",path:"/2/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},runTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `runTaskV1`.");let t={method:"POST",path:"/1/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},searchAuthentications(e,r){if(!e)throw new Error("Parameter `authenticationSearch` is required when calling `searchAuthentications`.");if(!e.authenticationIDs)throw new Error("Parameter `authenticationSearch.authenticationIDs` is required when calling `searchAuthentications`.");let t={method:"POST",path:"/1/authentications/search",queryParameters:{},headers:{},data:e};return n.request(t,r)},searchDestinations(e,r){if(!e)throw new Error("Parameter `destinationSearch` is required when calling `searchDestinations`.");if(!e.destinationIDs)throw new Error("Parameter `destinationSearch.destinationIDs` is required when calling `searchDestinations`.");let t={method:"POST",path:"/1/destinations/search",queryParameters:{},headers:{},data:e};return n.request(t,r)},searchSources(e,r){if(!e)throw new Error("Parameter `sourceSearch` is required when calling `searchSources`.");if(!e.sourceIDs)throw new Error("Parameter `sourceSearch.sourceIDs` is required when calling `searchSources`.");let t={method:"POST",path:"/1/sources/search",queryParameters:{},headers:{},data:e};return n.request(t,r)},searchTasks(e,r){if(!e)throw new Error("Parameter `taskSearch` is required when calling `searchTasks`.");if(!e.taskIDs)throw new Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasks`.");let t={method:"POST",path:"/2/tasks/search",queryParameters:{},headers:{},data:e};return n.request(t,r)},searchTasksV1(e,r){if(!e)throw new Error("Parameter `taskSearch` is required when calling `searchTasksV1`.");if(!e.taskIDs)throw new Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasksV1`.");let t={method:"POST",path:"/1/tasks/search",queryParameters:{},headers:{},data:e};return n.request(t,r)},searchTransformations(e,r){if(!e)throw new Error("Parameter `transformationSearch` is required when calling `searchTransformations`.");if(!e.transformationIDs)throw new Error("Parameter `transformationSearch.transformationIDs` is required when calling `searchTransformations`.");let t={method:"POST",path:"/1/transformations/search",queryParameters:{},headers:{},data:e};return n.request(t,r)},triggerDockerSourceDiscover({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `triggerDockerSourceDiscover`.");let t={method:"POST",path:"/1/sources/{sourceID}/discover".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(t,r)},tryTransformation(e,r){if(!e)throw new Error("Parameter `transformationTry` is required when calling `tryTransformation`.");if(!e.code)throw new Error("Parameter `transformationTry.code` is required when calling `tryTransformation`.");if(!e.sampleRecord)throw new Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformation`.");let t={method:"POST",path:"/1/transformations/try",queryParameters:{},headers:{},data:e};return n.request(t,r)},tryTransformationBeforeUpdate({transformationID:e,transformationTry:r},s){if(!e)throw new Error("Parameter `transformationID` is required when calling `tryTransformationBeforeUpdate`.");if(!r)throw new Error("Parameter `transformationTry` is required when calling `tryTransformationBeforeUpdate`.");if(!r.code)throw new Error("Parameter `transformationTry.code` is required when calling `tryTransformationBeforeUpdate`.");if(!r.sampleRecord)throw new Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformationBeforeUpdate`.");let c={method:"POST",path:"/1/transformations/{transformationID}/try".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return n.request(c,s)},updateAuthentication({authenticationID:e,authenticationUpdate:r},s){if(!e)throw new Error("Parameter `authenticationID` is required when calling `updateAuthentication`.");if(!r)throw new Error("Parameter `authenticationUpdate` is required when calling `updateAuthentication`.");let c={method:"PATCH",path:"/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return n.request(c,s)},updateDestination({destinationID:e,destinationUpdate:r},s){if(!e)throw new Error("Parameter `destinationID` is required when calling `updateDestination`.");if(!r)throw new Error("Parameter `destinationUpdate` is required when calling `updateDestination`.");let c={method:"PATCH",path:"/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return n.request(c,s)},updateSource({sourceID:e,sourceUpdate:r},s){if(!e)throw new Error("Parameter `sourceID` is required when calling `updateSource`.");if(!r)throw new Error("Parameter `sourceUpdate` is required when calling `updateSource`.");let c={method:"PATCH",path:"/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return n.request(c,s)},updateTask({taskID:e,taskUpdate:r},s){if(!e)throw new Error("Parameter `taskID` is required when calling `updateTask`.");if(!r)throw new Error("Parameter `taskUpdate` is required when calling `updateTask`.");let c={method:"PATCH",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return n.request(c,s)},updateTaskV1({taskID:e,taskUpdate:r},s){if(!e)throw new Error("Parameter `taskID` is required when calling `updateTaskV1`.");if(!r)throw new Error("Parameter `taskUpdate` is required when calling `updateTaskV1`.");let c={method:"PATCH",path:"/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return n.request(c,s)},updateTransformation({transformationID:e,transformationCreate:r},s){if(!e)throw new Error("Parameter `transformationID` is required when calling `updateTransformation`.");if(!r)throw new Error("Parameter `transformationCreate` is required when calling `updateTransformation`.");if(!r.code)throw new Error("Parameter `transformationCreate.code` is required when calling `updateTransformation`.");if(!r.name)throw new Error("Parameter `transformationCreate.name` is required when calling `updateTransformation`.");let c={method:"PUT",path:"/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return n.request(c,s)},validateSource(e,r=void 0){let t={method:"POST",path:"/1/sources/validate",queryParameters:{},headers:{},data:e||{}};return n.request(t,r)},validateSourceBeforeUpdate({sourceID:e,sourceUpdate:r},s){if(!e)throw new Error("Parameter `sourceID` is required when calling `validateSourceBeforeUpdate`.");if(!r)throw new Error("Parameter `sourceUpdate` is required when calling `validateSourceBeforeUpdate`.");let c={method:"POST",path:"/1/sources/{sourceID}/validate".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return n.request(c,s)}}}function Ps(a,o,d,m){if(!a||typeof a!="string")throw new Error("`appId` is missing.");if(!o||typeof o!="string")throw new Error("`apiKey` is missing.");if(!d||d&&(typeof d!="string"||!A.includes(d)))throw new Error(`\`region\` is required and must be one of the following: ${A.join(", ")}`);return Y({appId:a,apiKey:o,region:d,timeouts:{connect:W,read:B,write:$},logger:M(),requester:V(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:k(),requestsCache:k({serializable:!1}),hostsCache:S({caches:[N({key:`${x}-${a}`}),k()]}),...m})}

	exports.apiClientVersion = x;
	exports.ingestionClient = Ps;
	exports.isOnDemandTrigger = Pe;
	exports.isScheduleTrigger = qe;
	exports.isSubscriptionTrigger = ge;

}));
